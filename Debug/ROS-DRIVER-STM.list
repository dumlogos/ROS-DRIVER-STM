
ROS-DRIVER-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba4  08006ba4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bac  08006bac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb0  08006bb0  00016bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08006bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ab8  20000020  08006bd4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad8  08006bd4  00024ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a69e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000354f  00000000  00000000  0003a6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001388  00000000  00000000  0003dc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  0003efc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002134a  00000000  00000000  000401b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010beb  00000000  00000000  00061502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9fff  00000000  00000000  000720ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c0ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005174  00000000  00000000  0013c168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a9c 	.word	0x08006a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006a9c 	.word	0x08006a9c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a20:	f000 b972 	b.w	8000d08 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	4688      	mov	r8, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14b      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4615      	mov	r5, r2
 8000a4e:	d967      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0720 	rsb	r7, r2, #32
 8000a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a62:	4095      	lsls	r5, r2
 8000a64:	ea47 0803 	orr.w	r8, r7, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a74:	fa1f fc85 	uxth.w	ip, r5
 8000a78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a80:	fb07 f10c 	mul.w	r1, r7, ip
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18eb      	adds	r3, r5, r3
 8000a8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a8e:	f080 811b 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8118 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000a98:	3f02      	subs	r7, #2
 8000a9a:	442b      	add	r3, r5
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ab0:	45a4      	cmp	ip, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	192c      	adds	r4, r5, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aba:	f080 8107 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	f240 8104 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	442c      	add	r4, r5
 8000ac8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000acc:	eba4 040c 	sub.w	r4, r4, ip
 8000ad0:	2700      	movs	r7, #0
 8000ad2:	b11e      	cbz	r6, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c6 4300 	strd	r4, r3, [r6]
 8000adc:	4639      	mov	r1, r7
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0xbe>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80eb 	beq.w	8000cc2 <__udivmoddi4+0x286>
 8000aec:	2700      	movs	r7, #0
 8000aee:	e9c6 0100 	strd	r0, r1, [r6]
 8000af2:	4638      	mov	r0, r7
 8000af4:	4639      	mov	r1, r7
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f783 	clz	r7, r3
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d147      	bne.n	8000b92 <__udivmoddi4+0x156>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xd0>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80fa 	bhi.w	8000d00 <__udivmoddi4+0x2c4>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d0e0      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b1e:	e7dd      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b20:	b902      	cbnz	r2, 8000b24 <__udivmoddi4+0xe8>
 8000b22:	deff      	udf	#255	; 0xff
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	f040 808f 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2e:	1b49      	subs	r1, r1, r5
 8000b30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b34:	fa1f f885 	uxth.w	r8, r5
 8000b38:	2701      	movs	r7, #1
 8000b3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb08 f10c 	mul.w	r1, r8, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b5e:	4684      	mov	ip, r0
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b70:	fb08 f800 	mul.w	r8, r8, r0
 8000b74:	45a0      	cmp	r8, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x14c>
 8000b78:	192c      	adds	r4, r5, r4
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x14a>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	f200 80b6 	bhi.w	8000cf2 <__udivmoddi4+0x2b6>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 0408 	sub.w	r4, r4, r8
 8000b8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b90:	e79f      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b92:	f1c7 0c20 	rsb	ip, r7, #32
 8000b96:	40bb      	lsls	r3, r7
 8000b98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ba0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ba4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ba8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bb0:	4325      	orrs	r5, r4
 8000bb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bb6:	0c2c      	lsrs	r4, r5, #16
 8000bb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bbc:	fa1f fa8e 	uxth.w	sl, lr
 8000bc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	fa02 f207 	lsl.w	r2, r2, r7
 8000bce:	fa00 f107 	lsl.w	r1, r0, r7
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bdc:	f080 8087 	bcs.w	8000cee <__udivmoddi4+0x2b2>
 8000be0:	429c      	cmp	r4, r3
 8000be2:	f240 8084 	bls.w	8000cee <__udivmoddi4+0x2b2>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4473      	add	r3, lr
 8000bec:	1b1b      	subs	r3, r3, r4
 8000bee:	b2ad      	uxth	r5, r5
 8000bf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c00:	45a2      	cmp	sl, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1e 0404 	adds.w	r4, lr, r4
 8000c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0c:	d26b      	bcs.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c0e:	45a2      	cmp	sl, r4
 8000c10:	d969      	bls.n	8000ce6 <__udivmoddi4+0x2aa>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4474      	add	r4, lr
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c1e:	eba4 040a 	sub.w	r4, r4, sl
 8000c22:	454c      	cmp	r4, r9
 8000c24:	46c2      	mov	sl, r8
 8000c26:	464b      	mov	r3, r9
 8000c28:	d354      	bcc.n	8000cd4 <__udivmoddi4+0x298>
 8000c2a:	d051      	beq.n	8000cd0 <__udivmoddi4+0x294>
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d069      	beq.n	8000d04 <__udivmoddi4+0x2c8>
 8000c30:	ebb1 050a 	subs.w	r5, r1, sl
 8000c34:	eb64 0403 	sbc.w	r4, r4, r3
 8000c38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c3c:	40fd      	lsrs	r5, r7
 8000c3e:	40fc      	lsrs	r4, r7
 8000c40:	ea4c 0505 	orr.w	r5, ip, r5
 8000c44:	e9c6 5400 	strd	r5, r4, [r6]
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e747      	b.n	8000adc <__udivmoddi4+0xa0>
 8000c4c:	f1c2 0320 	rsb	r3, r2, #32
 8000c50:	fa20 f703 	lsr.w	r7, r0, r3
 8000c54:	4095      	lsls	r5, r2
 8000c56:	fa01 f002 	lsl.w	r0, r1, r2
 8000c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c62:	4338      	orrs	r0, r7
 8000c64:	0c01      	lsrs	r1, r0, #16
 8000c66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c6a:	fa1f f885 	uxth.w	r8, r5
 8000c6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c76:	fb07 f308 	mul.w	r3, r7, r8
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d907      	bls.n	8000c92 <__udivmoddi4+0x256>
 8000c82:	1869      	adds	r1, r5, r1
 8000c84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c88:	d22f      	bcs.n	8000cea <__udivmoddi4+0x2ae>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d92d      	bls.n	8000cea <__udivmoddi4+0x2ae>
 8000c8e:	3f02      	subs	r7, #2
 8000c90:	4429      	add	r1, r5
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	b281      	uxth	r1, r0
 8000c96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca2:	fb00 f308 	mul.w	r3, r0, r8
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x27e>
 8000caa:	1869      	adds	r1, r5, r1
 8000cac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cb0:	d217      	bcs.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d915      	bls.n	8000ce2 <__udivmoddi4+0x2a6>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4429      	add	r1, r5
 8000cba:	1ac9      	subs	r1, r1, r3
 8000cbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cc0:	e73b      	b.n	8000b3a <__udivmoddi4+0xfe>
 8000cc2:	4637      	mov	r7, r6
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	e709      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc8:	4607      	mov	r7, r0
 8000cca:	e6e7      	b.n	8000a9c <__udivmoddi4+0x60>
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e6fb      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000cd0:	4541      	cmp	r1, r8
 8000cd2:	d2ab      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cdc:	3801      	subs	r0, #1
 8000cde:	4613      	mov	r3, r2
 8000ce0:	e7a4      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce2:	4660      	mov	r0, ip
 8000ce4:	e7e9      	b.n	8000cba <__udivmoddi4+0x27e>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	e795      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cea:	4667      	mov	r7, ip
 8000cec:	e7d1      	b.n	8000c92 <__udivmoddi4+0x256>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e77c      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	442c      	add	r4, r5
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0x14c>
 8000cf8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cfc:	442b      	add	r3, r5
 8000cfe:	e72f      	b.n	8000b60 <__udivmoddi4+0x124>
 8000d00:	4638      	mov	r0, r7
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xda>
 8000d04:	4637      	mov	r7, r6
 8000d06:	e6e9      	b.n	8000adc <__udivmoddi4+0xa0>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d12:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <MX_CAN1_Init+0x6c>)
 8000d14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d28:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d2c:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d30:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_CAN1_Init+0x68>)
 8000d60:	f000 ff1e 	bl	8001ba0 <HAL_CAN_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000d6a:	f000 fd2c 	bl	80017c6 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20004998 	.word	0x20004998
 8000d78:	40006400 	.word	0x40006400

08000d7c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_CAN_MspInit+0xa4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d13c      	bne.n	8000e18 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_CAN_MspInit+0xa8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000de8:	2309      	movs	r3, #9
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <HAL_CAN_MspInit+0xac>)
 8000df4:	f001 ff1e 	bl	8002c34 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	2013      	movs	r0, #19
 8000dfe:	f001 fe19 	bl	8002a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000e02:	2013      	movs	r0, #19
 8000e04:	f001 fe32 	bl	8002a6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	2014      	movs	r0, #20
 8000e0e:	f001 fe11 	bl	8002a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e12:	2014      	movs	r0, #20
 8000e14:	f001 fe2a 	bl	8002a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40006400 	.word	0x40006400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020400 	.word	0x40020400

08000e2c <driverCANFilterInit>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void driverCANFilterInit(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef driverFilter;
	driverFilter.FilterBank = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
	driverFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
	driverFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
	driverFilter.FilterIdHigh = 0x0000;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
	driverFilter.FilterIdLow = 0x0000;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
	driverFilter.FilterMaskIdHigh = 0x0000;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
	driverFilter.FilterMaskIdLow = 0x0000;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
	driverFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
	driverFilter.FilterActivation = ENABLE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	623b      	str	r3, [r7, #32]
	driverFilter.SlaveStartFilterBank = 14;
 8000e56:	230e      	movs	r3, #14
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &driverFilter);
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4803      	ldr	r0, [pc, #12]	; (8000e6c <driverCANFilterInit+0x40>)
 8000e60:	f000 ff9a 	bl	8001d98 <HAL_CAN_ConfigFilter>
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20004998 	.word	0x20004998

08000e70 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_DAC_Init+0x4c>)
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <MX_DAC_Init+0x50>)
 8000e82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_DAC_Init+0x4c>)
 8000e86:	f001 fdff 	bl	8002a88 <HAL_DAC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e90:	f000 fc99 	bl	80017c6 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_DAC_Init+0x4c>)
 8000ea4:	f001 fe78 	bl	8002b98 <HAL_DAC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000eae:	f000 fc8a 	bl	80017c6 <Error_Handler>
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200049c0 	.word	0x200049c0
 8000ec0:	40007400 	.word	0x40007400

08000ec4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_DAC_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d127      	bne.n	8000f36 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_DAC_MspInit+0x80>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_DAC_MspInit+0x84>)
 8000f32:	f001 fe7f 	bl	8002c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40007400 	.word	0x40007400
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f50:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <MX_FREERTOS_Init+0x48>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <MX_FREERTOS_Init+0x4c>)
 8000f56:	f003 f895 	bl	8004084 <osThreadNew>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_FREERTOS_Init+0x50>)
 8000f5e:	601a      	str	r2, [r3, #0]

  /* creation of speedTask */
  speedTaskHandle = osThreadNew(speedCalculationStart, NULL, &speedTask_attributes);
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <MX_FREERTOS_Init+0x54>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <MX_FREERTOS_Init+0x58>)
 8000f66:	f003 f88d 	bl	8004084 <osThreadNew>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_FREERTOS_Init+0x5c>)
 8000f6e:	601a      	str	r2, [r3, #0]

  /* creation of posPIDTask */
  posPIDTaskHandle = osThreadNew(positionPIDStart, NULL, &posPIDTask_attributes);
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <MX_FREERTOS_Init+0x60>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_FREERTOS_Init+0x64>)
 8000f76:	f003 f885 	bl	8004084 <osThreadNew>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_FREERTOS_Init+0x68>)
 8000f7e:	601a      	str	r2, [r3, #0]

  /* creation of spdPIDTask */
  spdPIDTaskHandle = osThreadNew(speedPIDStart, NULL, &spdPIDTask_attributes);
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <MX_FREERTOS_Init+0x6c>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_FREERTOS_Init+0x70>)
 8000f86:	f003 f87d 	bl	8004084 <osThreadNew>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_FREERTOS_Init+0x74>)
 8000f8e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08006afc 	.word	0x08006afc
 8000f98:	08000fc5 	.word	0x08000fc5
 8000f9c:	200049d4 	.word	0x200049d4
 8000fa0:	08006b20 	.word	0x08006b20
 8000fa4:	08001139 	.word	0x08001139
 8000fa8:	20004a04 	.word	0x20004a04
 8000fac:	08006b44 	.word	0x08006b44
 8000fb0:	080011b1 	.word	0x080011b1
 8000fb4:	200049d8 	.word	0x200049d8
 8000fb8:	08006b68 	.word	0x08006b68
 8000fbc:	080011c1 	.word	0x080011c1
 8000fc0:	20004a10 	.word	0x20004a10

08000fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	CAN_TxHeaderTypeDef msgHeader;
	    uint8_t msgData[1] = {1};
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	    msgHeader.StdId = CAN_STM1 + T_CleanPlot;
 8000fd2:	f240 3309 	movw	r3, #777	; 0x309
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
	    msgHeader.DLC = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
	    msgHeader.TransmitGlobalTime = DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	    msgHeader.RTR = CAN_RTR_DATA;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	647b      	str	r3, [r7, #68]	; 0x44
	    msgHeader.IDE = CAN_ID_STD;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40

	    uint32_t mailBoxNum = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
	    uint32_t msgId = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	653b      	str	r3, [r7, #80]	; 0x50
	    while(1)
	   	    {
				HAL_CAN_AddTxMessage(&hcan1, &msgHeader, msgData, &mailBoxNum);
 8000ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ffa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ffe:	4847      	ldr	r0, [pc, #284]	; (800111c <StartDefaultTask+0x158>)
 8001000:	f000 ffee 	bl	8001fe0 <HAL_CAN_AddTxMessage>
	    		if(cleanPlotBool){
 8001004:	4b46      	ldr	r3, [pc, #280]	; (8001120 <StartDefaultTask+0x15c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <StartDefaultTask+0x58>
	    			cleanPlotBool = 0;
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <StartDefaultTask+0x15c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	    			break;
 8001012:	bf00      	nop
	    		}
				osDelay(1000);
	   	    }
	    osDelay(10);
 8001014:	200a      	movs	r0, #10
 8001016:	f003 f8db 	bl	80041d0 <osDelay>
 800101a:	e004      	b.n	8001026 <StartDefaultTask+0x62>
				osDelay(1000);
 800101c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001020:	f003 f8d6 	bl	80041d0 <osDelay>
				HAL_CAN_AddTxMessage(&hcan1, &msgHeader, msgData, &mailBoxNum);
 8001024:	e7e5      	b.n	8000ff2 <StartDefaultTask+0x2e>
  /* Infinite loop */
  for(;;)
  {
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 8001026:	483d      	ldr	r0, [pc, #244]	; (800111c <StartDefaultTask+0x158>)
 8001028:	f001 f8b5 	bl	8002196 <HAL_CAN_GetTxMailboxesFreeLevel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d070      	beq.n	8001114 <StartDefaultTask+0x150>
	  		  {
	  		    CAN_TxHeaderTypeDef msgHeader;
	  		    TxData.floats.fl1 = currentPosition;
 8001032:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <StartDefaultTask+0x160>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <StartDefaultTask+0x164>)
 8001038:	6013      	str	r3, [r2, #0]
	  		    TxData.floats.fl2 = currentTime;
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <StartDefaultTask+0x168>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a3a      	ldr	r2, [pc, #232]	; (8001128 <StartDefaultTask+0x164>)
 8001040:	6053      	str	r3, [r2, #4]
	  		    uint8_t msgData[8];
	  		    msgHeader.StdId = CAN_STM1 + T_Position;
 8001042:	f240 3317 	movw	r3, #791	; 0x317
 8001046:	61bb      	str	r3, [r7, #24]
	  		    msgHeader.DLC = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
	  		    msgHeader.TransmitGlobalTime = DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  		    msgHeader.RTR = CAN_RTR_DATA;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
	  		    msgHeader.IDE = CAN_ID_STD;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]

	  		    uint32_t mailBoxNum = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]

	  		    for (uint8_t i = 0; i < 4; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001064:	e01f      	b.n	80010a6 <StartDefaultTask+0xe2>
	  		    {
	  		      msgData[i] = TxData.uintData[3-i];
 8001066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800106a:	f1c3 0203 	rsb	r2, r3, #3
 800106e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001072:	492d      	ldr	r1, [pc, #180]	; (8001128 <StartDefaultTask+0x164>)
 8001074:	5c8a      	ldrb	r2, [r1, r2]
 8001076:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800107a:	440b      	add	r3, r1
 800107c:	f803 2c48 	strb.w	r2, [r3, #-72]
	  		      msgData[i+4] = TxData.uintData[7-i];
 8001080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001084:	f1c3 0207 	rsb	r2, r3, #7
 8001088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800108c:	3304      	adds	r3, #4
 800108e:	4926      	ldr	r1, [pc, #152]	; (8001128 <StartDefaultTask+0x164>)
 8001090:	5c8a      	ldrb	r2, [r1, r2]
 8001092:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001096:	440b      	add	r3, r1
 8001098:	f803 2c48 	strb.w	r2, [r3, #-72]
	  		    for (uint8_t i = 0; i < 4; i++)
 800109c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80010a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d9db      	bls.n	8001066 <StartDefaultTask+0xa2>
	  		    }

	  		    HAL_CAN_AddTxMessage(&hcan1, &msgHeader, msgData, &mailBoxNum);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	f107 0210 	add.w	r2, r7, #16
 80010b6:	f107 0118 	add.w	r1, r7, #24
 80010ba:	4818      	ldr	r0, [pc, #96]	; (800111c <StartDefaultTask+0x158>)
 80010bc:	f000 ff90 	bl	8001fe0 <HAL_CAN_AddTxMessage>

	  		    TxData.floats.fl1 = currentSpeed;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <StartDefaultTask+0x16c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <StartDefaultTask+0x164>)
 80010c6:	6013      	str	r3, [r2, #0]
	  		    msgHeader.StdId = CAN_STM1 + T_Speed;
 80010c8:	f44f 7346 	mov.w	r3, #792	; 0x318
 80010cc:	61bb      	str	r3, [r7, #24]
	  		    for (uint8_t i = 0; i < 4; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80010d4:	e011      	b.n	80010fa <StartDefaultTask+0x136>
	  		    {
	  		      msgData[i] = TxData.uintData[3-i];
 80010d6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010da:	f1c3 0203 	rsb	r2, r3, #3
 80010de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010e2:	4911      	ldr	r1, [pc, #68]	; (8001128 <StartDefaultTask+0x164>)
 80010e4:	5c8a      	ldrb	r2, [r1, r2]
 80010e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80010ea:	440b      	add	r3, r1
 80010ec:	f803 2c48 	strb.w	r2, [r3, #-72]
	  		    for (uint8_t i = 0; i < 4; i++)
 80010f0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010f4:	3301      	adds	r3, #1
 80010f6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80010fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d9e9      	bls.n	80010d6 <StartDefaultTask+0x112>
	  		    }
	  		    HAL_CAN_AddTxMessage(&hcan1, &msgHeader, msgData, &mailBoxNum);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	f107 0210 	add.w	r2, r7, #16
 800110a:	f107 0118 	add.w	r1, r7, #24
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <StartDefaultTask+0x158>)
 8001110:	f000 ff66 	bl	8001fe0 <HAL_CAN_AddTxMessage>
	  		  }
    osDelay(20);
 8001114:	2014      	movs	r0, #20
 8001116:	f003 f85b 	bl	80041d0 <osDelay>
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 800111a:	e784      	b.n	8001026 <StartDefaultTask+0x62>
 800111c:	20004998 	.word	0x20004998
 8001120:	2000008c 	.word	0x2000008c
 8001124:	20000054 	.word	0x20000054
 8001128:	200049fc 	.word	0x200049fc
 800112c:	2000004c 	.word	0x2000004c
 8001130:	20000070 	.word	0x20000070
 8001134:	00000000 	.word	0x00000000

08001138 <speedCalculationStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speedCalculationStart */
void speedCalculationStart(void *argument)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speedCalculationStart */

  /* Infinite loop */
  for(;;)
  {
		previousPosition = currentPosition;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <speedCalculationStart+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <speedCalculationStart+0x6c>)
 8001146:	6013      	str	r3, [r2, #0]
		currentPosition = (float)TIM1->CNT*0.36;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <speedCalculationStart+0x70>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001154:	ee17 0a90 	vmov	r0, s15
 8001158:	f7ff f99e 	bl	8000498 <__aeabi_f2d>
 800115c:	a30e      	add	r3, pc, #56	; (adr r3, 8001198 <speedCalculationStart+0x60>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_dmul>
 8001166:	4603      	mov	r3, r0
 8001168:	460c      	mov	r4, r1
 800116a:	4618      	mov	r0, r3
 800116c:	4621      	mov	r1, r4
 800116e:	f7ff fbfd 	bl	800096c <__aeabi_d2f>
 8001172:	4602      	mov	r2, r0
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <speedCalculationStart+0x68>)
 8001176:	601a      	str	r2, [r3, #0]
		currentSpeed = currentPosition - previousPosition;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <speedCalculationStart+0x68>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <speedCalculationStart+0x6c>)
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <speedCalculationStart+0x74>)
 800118a:	edc3 7a00 	vstr	s15, [r3]


    osDelay(5);
 800118e:	2005      	movs	r0, #5
 8001190:	f003 f81e 	bl	80041d0 <osDelay>
		previousPosition = currentPosition;
 8001194:	e7d4      	b.n	8001140 <speedCalculationStart+0x8>
 8001196:	bf00      	nop
 8001198:	70a3d70a 	.word	0x70a3d70a
 800119c:	3fd70a3d 	.word	0x3fd70a3d
 80011a0:	20000054 	.word	0x20000054
 80011a4:	20000058 	.word	0x20000058
 80011a8:	40010000 	.word	0x40010000
 80011ac:	20000070 	.word	0x20000070

080011b0 <positionPIDStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_positionPIDStart */
void positionPIDStart(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN positionPIDStart */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80011b8:	200a      	movs	r0, #10
 80011ba:	f003 f809 	bl	80041d0 <osDelay>
 80011be:	e7fb      	b.n	80011b8 <positionPIDStart+0x8>

080011c0 <speedPIDStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speedPIDStart */
void speedPIDStart(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speedPIDStart */
  /* Infinite loop */
  for(;;)
  {
	currentTime += dt/1000;
 80011c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80011ec <speedPIDStart+0x2c>
 80011d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <speedPIDStart+0x30>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <speedPIDStart+0x30>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]


    osDelay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f002 fff3 	bl	80041d0 <osDelay>
	currentTime += dt/1000;
 80011ea:	e7ed      	b.n	80011c8 <speedPIDStart+0x8>
 80011ec:	447a0000 	.word	0x447a0000
 80011f0:	2000004c 	.word	0x2000004c

080011f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	; 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t msgId = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  uint8_t msgData[8];

  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &msgHeader, msgData);
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4a9e      	ldr	r2, [pc, #632]	; (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001206:	2100      	movs	r1, #0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fff9 	bl	8002200 <HAL_CAN_GetRxMessage>

  msgId = msgHeader.StdId;
 800120e:	4b9c      	ldr	r3, [pc, #624]	; (8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
  switch(msgId){
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f240 321a 	movw	r2, #794	; 0x31a
 800121a:	4293      	cmp	r3, r2
 800121c:	f000 80c4 	beq.w	80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
 8001220:	f240 321a 	movw	r2, #794	; 0x31a
 8001224:	4293      	cmp	r3, r2
 8001226:	d813      	bhi.n	8001250 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>
 8001228:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800122c:	f000 815e 	beq.w	80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>
 8001230:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001234:	d803      	bhi.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8001236:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800123a:	d01c      	beq.n	8001276 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
		  speedErrorIntegral = 0;
		  speedRegulatorForce = 0;
	  	  break;
  }

}
 800123c:	e19b      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
  switch(msgId){
 800123e:	f240 1209 	movw	r2, #265	; 0x109
 8001242:	4293      	cmp	r3, r2
 8001244:	d076      	beq.n	8001334 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
 8001246:	f240 3219 	movw	r2, #793	; 0x319
 800124a:	4293      	cmp	r3, r2
 800124c:	d076      	beq.n	800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>
}
 800124e:	e192      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
  switch(msgId){
 8001250:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8001254:	f000 80c3 	beq.w	80013de <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
 8001258:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 800125c:	f0c0 8089 	bcc.w	8001372 <HAL_CAN_RxFifo0MsgPendingCallback+0x17e>
 8001260:	f240 321d 	movw	r2, #797	; 0x31d
 8001264:	4293      	cmp	r3, r2
 8001266:	f000 80f0 	beq.w	800144a <HAL_CAN_RxFifo0MsgPendingCallback+0x256>
 800126a:	f240 321e 	movw	r2, #798	; 0x31e
 800126e:	4293      	cmp	r3, r2
 8001270:	f000 80d0 	beq.w	8001414 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>
}
 8001274:	e17f      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127a:	e00f      	b.n	800129c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  RxData.uintData[i] = msgData[3-i];
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	f1c3 0303 	rsb	r3, r3, #3
 8001282:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001286:	4413      	add	r3, r2
 8001288:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800128c:	4a7d      	ldr	r2, [pc, #500]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	4413      	add	r3, r2
 8001292:	460a      	mov	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	3301      	adds	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2b03      	cmp	r3, #3
 80012a0:	ddec      	ble.n	800127c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
		  desiredPosition = RxData.floats.fl1;
 80012a2:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a78      	ldr	r2, [pc, #480]	; (8001488 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>)
 80012a8:	6013      	str	r3, [r2, #0]
		  TIM1->CNT = 1000*32;
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 80012ac:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
		  regulatorForce = 0;
 80012b2:	4b77      	ldr	r3, [pc, #476]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
		  currentPosition = 0;
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
		  previousPosition = 0;
 80012c2:	4b75      	ldr	r3, [pc, #468]	; (8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
		  currentPositionError = 0;
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
		  previousPositionError = 0;
 80012d2:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
		  positionErrorDifferential = 0;
 80012da:	4b72      	ldr	r3, [pc, #456]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
		  positionErrorIntegral = 0;
 80012e2:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
		  positionRegulatorForce = 0;
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
		  currentSpeed = 0;
 80012f2:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
		  previousSpeed = 0;
 80012fa:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
		  desiredSpeed = 0;
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
		  currentSpeedError = 0;
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
		  previousSpeedError = 0;
 8001312:	4b6b      	ldr	r3, [pc, #428]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
		  speedErrorDifferential = 0;
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
		  speedErrorIntegral = 0;
 8001322:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		  speedRegulatorForce = 0;
 800132a:	4b68      	ldr	r3, [pc, #416]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		  break;
 8001332:	e120      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  cleanPlotBool = 1;
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
		  break;
 800133a:	e11c      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001340:	e00f      	b.n	8001362 <HAL_CAN_RxFifo0MsgPendingCallback+0x16e>
			 RxData.uintData[i] = msgData[3-i];
 8001342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001344:	f1c3 0303 	rsb	r3, r3, #3
 8001348:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800134c:	4413      	add	r3, r2
 800134e:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001352:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	4413      	add	r3, r2
 8001358:	460a      	mov	r2, r1
 800135a:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	3301      	adds	r3, #1
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
 8001362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001364:	2b03      	cmp	r3, #3
 8001366:	ddec      	ble.n	8001342 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
		  positionProportionalRatio = RxData.floats.fl1;
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a59      	ldr	r2, [pc, #356]	; (80014d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800136e:	6013      	str	r3, [r2, #0]
		  break;
 8001370:	e101      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	e00f      	b.n	8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>
			 RxData.uintData[i] = msgData[3-i];
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f1c3 0303 	rsb	r3, r3, #3
 800137e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001382:	4413      	add	r3, r2
 8001384:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001388:	4a3e      	ldr	r2, [pc, #248]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	4413      	add	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	2b03      	cmp	r3, #3
 800139c:	ddec      	ble.n	8001378 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
		  positionIntegralRatio = RxData.floats.fl1;
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 80013a4:	6013      	str	r3, [r2, #0]
		  break;
 80013a6:	e0e6      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	e00f      	b.n	80013ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
			 RxData.uintData[i] = msgData[3-i];
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	f1c3 0303 	rsb	r3, r3, #3
 80013b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013b8:	4413      	add	r3, r2
 80013ba:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80013be:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	4413      	add	r3, r2
 80013c4:	460a      	mov	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	3301      	adds	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	ddec      	ble.n	80013ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
		  positionDifferentialRatio = RxData.floats.fl1;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a40      	ldr	r2, [pc, #256]	; (80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 80013da:	6013      	str	r3, [r2, #0]
		  break;
 80013dc:	e0cb      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e00f      	b.n	8001404 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>
			 RxData.uintData[i] = msgData[3-i];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0303 	rsb	r3, r3, #3
 80013ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013ee:	4413      	add	r3, r2
 80013f0:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	460a      	mov	r2, r1
 80013fc:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b03      	cmp	r3, #3
 8001408:	ddec      	ble.n	80013e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
		  speedProportionalRatio = RxData.floats.fl1;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a34      	ldr	r2, [pc, #208]	; (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8001410:	6013      	str	r3, [r2, #0]
		  break;
 8001412:	e0b0      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	e00f      	b.n	800143a <HAL_CAN_RxFifo0MsgPendingCallback+0x246>
			 RxData.uintData[i] = msgData[3-i];
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	f1c3 0303 	rsb	r3, r3, #3
 8001420:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001424:	4413      	add	r3, r2
 8001426:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4413      	add	r3, r2
 8001430:	460a      	mov	r2, r1
 8001432:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3301      	adds	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b03      	cmp	r3, #3
 800143e:	ddec      	ble.n	800141a <HAL_CAN_RxFifo0MsgPendingCallback+0x226>
		  speedIntegralRatio = RxData.floats.fl1;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8001446:	6013      	str	r3, [r2, #0]
		  break;
 8001448:	e095      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
		  for(int i = 0; i < 4; ++i)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e00f      	b.n	8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>
			 RxData.uintData[i] = msgData[3-i];
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f1c3 0303 	rsb	r3, r3, #3
 8001456:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800145a:	4413      	add	r3, r2
 800145c:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	4413      	add	r3, r2
 8001466:	460a      	mov	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 4; ++i)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b03      	cmp	r3, #3
 8001474:	ddec      	ble.n	8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>
		  speedDifferentialRatio = RxData.floats.fl1;
 8001476:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800147c:	6013      	str	r3, [r2, #0]
		  break;
 800147e:	e07a      	b.n	8001576 <HAL_CAN_RxFifo0MsgPendingCallback+0x382>
 8001480:	200049dc 	.word	0x200049dc
 8001484:	20004a08 	.word	0x20004a08
 8001488:	20000008 	.word	0x20000008
 800148c:	40010000 	.word	0x40010000
 8001490:	20000050 	.word	0x20000050
 8001494:	20000054 	.word	0x20000054
 8001498:	20000058 	.word	0x20000058
 800149c:	2000005c 	.word	0x2000005c
 80014a0:	20000060 	.word	0x20000060
 80014a4:	20000064 	.word	0x20000064
 80014a8:	20000068 	.word	0x20000068
 80014ac:	2000006c 	.word	0x2000006c
 80014b0:	20000070 	.word	0x20000070
 80014b4:	20000074 	.word	0x20000074
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000078 	.word	0x20000078
 80014c0:	2000007c 	.word	0x2000007c
 80014c4:	20000080 	.word	0x20000080
 80014c8:	20000084 	.word	0x20000084
 80014cc:	20000088 	.word	0x20000088
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	20000000 	.word	0x20000000
 80014d8:	2000003c 	.word	0x2000003c
 80014dc:	20000040 	.word	0x20000040
 80014e0:	20000004 	.word	0x20000004
 80014e4:	20000044 	.word	0x20000044
 80014e8:	20000048 	.word	0x20000048
		  TIM1->CNT = 2147483648-1;
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_CAN_RxFifo0MsgPendingCallback+0x38c>)
 80014ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
		  regulatorForce = 0;
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0x390>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
		  currentPosition = 0;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x394>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
		  previousPosition = 0;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x398>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
		  currentPositionError = 0;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x39c>)
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
		  previousPositionError = 0;
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>)
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
		  positionErrorDifferential = 0;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		  positionErrorIntegral = 0;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x3a8>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
		  positionRegulatorForce = 0;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ac>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
		  currentSpeed = 0;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b0>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
		  previousSpeed = 0;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b4>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		  desiredSpeed = 0;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		  currentSpeedError = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3bc>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
		  previousSpeedError = 0;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c0>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
		  speedErrorDifferential = 0;
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c4>)
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
		  speedErrorIntegral = 0;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c8>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
		  speedRegulatorForce = 0;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3cc>)
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
	  	  break;
 8001574:	bf00      	nop
}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	; 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40010000 	.word	0x40010000
 8001584:	20000050 	.word	0x20000050
 8001588:	20000054 	.word	0x20000054
 800158c:	20000058 	.word	0x20000058
 8001590:	2000005c 	.word	0x2000005c
 8001594:	20000060 	.word	0x20000060
 8001598:	20000064 	.word	0x20000064
 800159c:	20000068 	.word	0x20000068
 80015a0:	2000006c 	.word	0x2000006c
 80015a4:	20000070 	.word	0x20000070
 80015a8:	20000074 	.word	0x20000074
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	20000078 	.word	0x20000078
 80015b4:	2000007c 	.word	0x2000007c
 80015b8:	20000080 	.word	0x20000080
 80015bc:	20000084 	.word	0x20000084
 80015c0:	20000088 	.word	0x20000088

080015c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_GPIO_Init+0x9c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <MX_GPIO_Init+0x9c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_GPIO_Init+0x9c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_GPIO_Init+0x9c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <MX_GPIO_Init+0x9c>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_GPIO_Init+0x9c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_GPIO_Init+0x9c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <MX_GPIO_Init+0x9c>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_GPIO_Init+0x9c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_GPIO_Init+0xa0>)
 8001636:	f001 fc97 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0xa0>)
 8001654:	f001 faee 	bl	8002c34 <HAL_GPIO_Init>

}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166c:	f000 fa56 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001670:	f000 f830 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001674:	f7ff ffa6 	bl	80015c4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001678:	f7ff fb48 	bl	8000d0c <MX_CAN1_Init>
  MX_DAC_Init();
 800167c:	f7ff fbf8 	bl	8000e70 <MX_DAC_Init>
  MX_TIM5_Init();
 8001680:	f000 f986 	bl	8001990 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_MspInit(&htim5);
 8001684:	480f      	ldr	r0, [pc, #60]	; (80016c4 <main+0x5c>)
 8001686:	f000 f9d7 	bl	8001a38 <HAL_TIM_Encoder_MspInit>

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 800168a:	2100      	movs	r1, #0
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <main+0x5c>)
 800168e:	f002 f9ca 	bl	8003a26 <HAL_TIM_Encoder_Start>

  driverCANFilterInit();
 8001692:	f7ff fbcb 	bl	8000e2c <driverCANFilterInit>
  HAL_CAN_Start(&hcan1);
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <main+0x60>)
 8001698:	f000 fc5e 	bl	8001f58 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800169c:	2102      	movs	r1, #2
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <main+0x60>)
 80016a0:	f000 fec0 	bl	8002424 <HAL_CAN_ActivateNotification>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <main+0x64>)
 80016a8:	f001 fa10 	bl	8002acc <HAL_DAC_Start>
  TIM1->CNT=2147483648-1;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <main+0x68>)
 80016ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016b4:	f002 fc7c 	bl	8003fb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80016b8:	f7ff fc48 	bl	8000f4c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016bc:	f002 fcac 	bl	8004018 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <main+0x58>
 80016c2:	bf00      	nop
 80016c4:	20004a54 	.word	0x20004a54
 80016c8:	20004998 	.word	0x20004998
 80016cc:	200049c0 	.word	0x200049c0
 80016d0:	40010000 	.word	0x40010000

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 f9d1 	bl	8006a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <SystemClock_Config+0xcc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <SystemClock_Config+0xd0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001744:	230c      	movs	r3, #12
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fc1f 	bl	8002f9c <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001764:	f000 f82f 	bl	80017c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001774:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2104      	movs	r1, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fe78 	bl	800347c <HAL_RCC_ClockConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001792:	f000 f818 	bl	80017c6 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	; 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f000 f9d1 	bl	8001b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ca:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x6>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_MspInit+0x64>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <HAL_MspInit+0x64>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_MspInit+0x64>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x64>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_MspInit+0x64>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x64>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	f001 f90d 	bl	8002a34 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	2005      	movs	r0, #5
 8001820:	f001 f908 	bl	8002a34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001824:	2005      	movs	r0, #5
 8001826:	f001 f921 	bl	8002a6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	201c      	movs	r0, #28
 800184e:	f001 f8f1 	bl	8002a34 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001852:	201c      	movs	r0, #28
 8001854:	f001 f90a 	bl	8002a6c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_InitTick+0xa8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_InitTick+0xa8>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_InitTick+0xa8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f001 ffb4 	bl	80037ec <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001884:	f001 ff9e 	bl	80037c4 <HAL_RCC_GetPCLK1Freq>
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_InitTick+0xac>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	3b01      	subs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0xb0>)
 800189e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_InitTick+0xb0>)
 80018a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018aa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_InitTick+0xb0>)
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_InitTick+0xb0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_InitTick+0xb0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <HAL_InitTick+0xb0>)
 80018c0:	f001 ffc6 	bl	8003850 <HAL_TIM_Base_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d104      	bne.n	80018d4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <HAL_InitTick+0xb0>)
 80018cc:	f001 fff5 	bl	80038ba <HAL_TIM_Base_Start_IT>
 80018d0:	4603      	mov	r3, r0
 80018d2:	e000      	b.n	80018d6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3730      	adds	r7, #48	; 0x30
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	20004a14 	.word	0x20004a14

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <CAN1_TX_IRQHandler+0x10>)
 800192e:	f000 fd9f 	bl	8002470 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20004998 	.word	0x20004998

0800193c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <CAN1_RX0_IRQHandler+0x10>)
 8001942:	f000 fd95 	bl	8002470 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20004998 	.word	0x20004998

08001950 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <TIM2_IRQHandler+0x10>)
 8001956:	f002 f89d 	bl	8003a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20004a14 	.word	0x20004a14

08001964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <SystemInit+0x28>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <SystemInit+0x28>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <SystemInit+0x28>)
 800197a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800197e:	609a      	str	r2, [r3, #8]
#endif
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2224      	movs	r2, #36	; 0x24
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 f873 	bl	8006a8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019ae:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <MX_TIM5_Init+0xa4>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d2:	2303      	movs	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	2301      	movs	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <MX_TIM5_Init+0xa0>)
 80019fe:	f001 ff80 	bl	8003902 <HAL_TIM_Encoder_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001a08:	f7ff fedd 	bl	80017c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_TIM5_Init+0xa0>)
 8001a1a:	f002 fa31 	bl	8003e80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001a24:	f7ff fecf 	bl	80017c6 <Error_Handler>
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3730      	adds	r7, #48	; 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20004a54 	.word	0x20004a54
 8001a34:	40000c00 	.word	0x40000c00

08001a38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_TIM_Encoder_MspInit+0x84>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12b      	bne.n	8001ab2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a92:	2303      	movs	r3, #3
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001aae:	f001 f8c1 	bl	8002c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40000c00 	.word	0x40000c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <Reset_Handler>:
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b00 <LoopFillZerobss+0x14>
 8001acc:	2100      	movs	r1, #0
 8001ace:	e003      	b.n	8001ad8 <LoopCopyDataInit>

08001ad0 <CopyDataInit>:
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <LoopFillZerobss+0x18>)
 8001ad2:	585b      	ldr	r3, [r3, r1]
 8001ad4:	5043      	str	r3, [r0, r1]
 8001ad6:	3104      	adds	r1, #4

08001ad8 <LoopCopyDataInit>:
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <LoopFillZerobss+0x1c>)
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <LoopFillZerobss+0x20>)
 8001adc:	1842      	adds	r2, r0, r1
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3f6      	bcc.n	8001ad0 <CopyDataInit>
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <LoopFillZerobss+0x24>)
 8001ae4:	e002      	b.n	8001aec <LoopFillZerobss>

08001ae6 <FillZerobss>:
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f842 3b04 	str.w	r3, [r2], #4

08001aec <LoopFillZerobss>:
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <LoopFillZerobss+0x28>)
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3f9      	bcc.n	8001ae6 <FillZerobss>
 8001af2:	f7ff ff37 	bl	8001964 <SystemInit>
 8001af6:	f004 ff99 	bl	8006a2c <__libc_init_array>
 8001afa:	f7ff fdb5 	bl	8001668 <main>
 8001afe:	4770      	bx	lr
 8001b00:	20020000 	.word	0x20020000
 8001b04:	08006bb4 	.word	0x08006bb4
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000020 	.word	0x20000020
 8001b10:	20000020 	.word	0x20000020
 8001b14:	20004ad8 	.word	0x20004ad8

08001b18 <ADC_IRQHandler>:
 8001b18:	e7fe      	b.n	8001b18 <ADC_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <HAL_Init+0x40>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_Init+0x40>)
 8001b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x40>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 ff6a 	bl	8002a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fe74 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fe3e 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000018 	.word	0x20000018
 8001b84:	20004a94 	.word	0x20004a94

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20004a94 	.word	0x20004a94

08001ba0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0ed      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff f8dc 	bl	8000d7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0202 	bic.w	r2, r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff ffd8 	bl	8001b88 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bda:	e012      	b.n	8001c02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bdc:	f7ff ffd4 	bl	8001b88 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b0a      	cmp	r3, #10
 8001be8:	d90b      	bls.n	8001c02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0c5      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e5      	bne.n	8001bdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c20:	f7ff ffb2 	bl	8001b88 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	e012      	b.n	8001c4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c28:	f7ff ffae 	bl	8001b88 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b0a      	cmp	r3, #10
 8001c34:	d90b      	bls.n	8001c4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2205      	movs	r2, #5
 8001c46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e09f      	b.n	8001d8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0e5      	beq.n	8001c28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7e1b      	ldrb	r3, [r3, #24]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d108      	bne.n	8001c76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e007      	b.n	8001c86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7e5b      	ldrb	r3, [r3, #25]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d108      	bne.n	8001ca0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e9b      	ldrb	r3, [r3, #26]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d108      	bne.n	8001cca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0220 	bic.w	r2, r2, #32
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7edb      	ldrb	r3, [r3, #27]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0210 	bic.w	r2, r2, #16
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e007      	b.n	8001d04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0210 	orr.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7f1b      	ldrb	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d108      	bne.n	8001d1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0208 	bic.w	r2, r2, #8
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7f5b      	ldrb	r3, [r3, #29]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0204 	orr.w	r2, r2, #4
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e007      	b.n	8001d58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0204 	bic.w	r2, r2, #4
 8001d56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	ea42 0103 	orr.w	r1, r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_ConfigFilter+0x26>
 8001db6:	7cfb      	ldrb	r3, [r7, #19]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 80be 	bne.w	8001f3a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_CAN_ConfigFilter+0x1bc>)
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 031f 	and.w	r3, r3, #31
 8001dfe:	2201      	movs	r2, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	401a      	ands	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d123      	bne.n	8001e68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3248      	adds	r2, #72	; 0x48
 8001e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	3348      	adds	r3, #72	; 0x48
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d122      	bne.n	8001eb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3248      	adds	r2, #72	; 0x48
 8001e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	3348      	adds	r3, #72	; 0x48
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ed0:	e007      	b.n	8001ee2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001efc:	e007      	b.n	8001f0e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d107      	bne.n	8001f26 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f2c:	f023 0201 	bic.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e006      	b.n	8001f48 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40006400 	.word	0x40006400

08001f58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d12e      	bne.n	8001fca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff fe00 	bl	8001b88 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f8a:	e012      	b.n	8001fb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f8c:	f7ff fdfc 	bl	8001b88 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b0a      	cmp	r3, #10
 8001f98:	d90b      	bls.n	8001fb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e012      	b.n	8001fd8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e5      	bne.n	8001f8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e006      	b.n	8001fd8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d003      	beq.n	800200c <HAL_CAN_AddTxMessage+0x2c>
 8002004:	7ffb      	ldrb	r3, [r7, #31]
 8002006:	2b02      	cmp	r3, #2
 8002008:	f040 80b8 	bne.w	800217c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80a0 	beq.w	800216c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	0e1b      	lsrs	r3, r3, #24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d907      	bls.n	800204c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e09e      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800204c:	2201      	movs	r2, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	409a      	lsls	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e00f      	b.n	800209a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002084:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800208e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3318      	adds	r3, #24
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	440b      	add	r3, r1
 8002098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3318      	adds	r3, #24
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	440b      	add	r3, r1
 80020aa:	3304      	adds	r3, #4
 80020ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	7d1b      	ldrb	r3, [r3, #20]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d111      	bne.n	80020da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3318      	adds	r3, #24
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3318      	adds	r3, #24
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	3304      	adds	r3, #4
 80020d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3307      	adds	r3, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	061a      	lsls	r2, r3, #24
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3306      	adds	r3, #6
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	4313      	orrs	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	3204      	adds	r2, #4
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	4610      	mov	r0, r2
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	ea43 0200 	orr.w	r2, r3, r0
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	440b      	add	r3, r1
 800210c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002110:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3303      	adds	r3, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	061a      	lsls	r2, r3, #24
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3302      	adds	r3, #2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	4313      	orrs	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	4610      	mov	r0, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	6811      	ldr	r1, [r2, #0]
 8002138:	ea43 0200 	orr.w	r2, r3, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3318      	adds	r3, #24
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6811      	ldr	r1, [r2, #0]
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3318      	adds	r3, #24
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	440b      	add	r3, r1
 8002166:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e00e      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e006      	b.n	800218a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d002      	beq.n	80021b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d11d      	bne.n	80021f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002214:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d003      	beq.n	8002224 <HAL_CAN_GetRxMessage+0x24>
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b02      	cmp	r3, #2
 8002220:	f040 80f3 	bne.w	800240a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0e7      	b.n	8002418 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0d8      	b.n	8002418 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	331b      	adds	r3, #27
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4413      	add	r3, r2
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0204 	and.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10c      	bne.n	800229e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	331b      	adds	r3, #27
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0d5b      	lsrs	r3, r3, #21
 8002294:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e00b      	b.n	80022b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	331b      	adds	r3, #27
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	331b      	adds	r3, #27
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0202 	and.w	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	331b      	adds	r3, #27
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	3304      	adds	r3, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 020f 	and.w	r2, r3, #15
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	331b      	adds	r3, #27
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	331b      	adds	r3, #27
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	4413      	add	r3, r2
 800231e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b2da      	uxtb	r2, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	4413      	add	r3, r2
 8002334:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0a1a      	lsrs	r2, r3, #8
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0c1a      	lsrs	r2, r3, #16
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3302      	adds	r3, #2
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e1a      	lsrs	r2, r3, #24
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3303      	adds	r3, #3
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	4413      	add	r3, r2
 8002382:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	3304      	adds	r3, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0a1a      	lsrs	r2, r3, #8
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3305      	adds	r3, #5
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0c1a      	lsrs	r2, r3, #16
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3306      	adds	r3, #6
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e1a      	lsrs	r2, r3, #24
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3307      	adds	r3, #7
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	e007      	b.n	8002406 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e006      	b.n	8002418 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002434:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d002      	beq.n	8002442 <HAL_CAN_ActivateNotification+0x1e>
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d109      	bne.n	8002456 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6959      	ldr	r1, [r3, #20]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e006      	b.n	8002464 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07c      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f97d 	bl	80027d2 <HAL_CAN_TxMailbox0CompleteCallback>
 80024d8:	e016      	b.n	8002508 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e00c      	b.n	8002508 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e002      	b.n	8002508 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f983 	bl	800280e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d024      	beq.n	800255c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f95d 	bl	80027e6 <HAL_CAN_TxMailbox1CompleteCallback>
 800252c:	e016      	b.n	800255c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
 8002540:	e00c      	b.n	800255c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
 8002554:	e002      	b.n	800255c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f963 	bl	8002822 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d024      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800256e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f93d 	bl	80027fa <HAL_CAN_TxMailbox2CompleteCallback>
 8002580:	e016      	b.n	80025b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
 8002594:	e00c      	b.n	80025b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e002      	b.n	80025b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f943 	bl	8002836 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2210      	movs	r2, #16
 80025d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d006      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2208      	movs	r2, #8
 80025ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f92a 	bl	800284a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fdf0 	bl	80011f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2210      	movs	r2, #16
 8002636:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2208      	movs	r2, #8
 8002652:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f90c 	bl	8002872 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8f3 	bl	800285e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8f6 	bl	8002886 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8ef 	bl	800289a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d075      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d06c      	beq.n	80027aa <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272a:	2b00      	cmp	r3, #0
 800272c:	d03d      	beq.n	80027aa <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	d038      	beq.n	80027aa <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273e:	2b30      	cmp	r3, #48	; 0x30
 8002740:	d017      	beq.n	8002772 <HAL_CAN_IRQHandler+0x302>
 8002742:	2b30      	cmp	r3, #48	; 0x30
 8002744:	d804      	bhi.n	8002750 <HAL_CAN_IRQHandler+0x2e0>
 8002746:	2b10      	cmp	r3, #16
 8002748:	d009      	beq.n	800275e <HAL_CAN_IRQHandler+0x2ee>
 800274a:	2b20      	cmp	r3, #32
 800274c:	d00c      	beq.n	8002768 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800274e:	e024      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002750:	2b50      	cmp	r3, #80	; 0x50
 8002752:	d018      	beq.n	8002786 <HAL_CAN_IRQHandler+0x316>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d01b      	beq.n	8002790 <HAL_CAN_IRQHandler+0x320>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d00f      	beq.n	800277c <HAL_CAN_IRQHandler+0x30c>
            break;
 800275c:	e01d      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002766:	e018      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f043 0310 	orr.w	r3, r3, #16
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002770:	e013      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f043 0320 	orr.w	r3, r3, #32
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800277a:	e00e      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002784:	e009      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800278e:	e004      	b.n	800279a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002798:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2204      	movs	r2, #4
 80027b0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f872 	bl	80028ae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ff4c 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a46:	f7ff ff61 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f7ff ffb1 	bl	80029b8 <NVIC_EncodePriority>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff80 	bl	8002964 <__NVIC_SetPriority>
}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff54 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e014      	b.n	8002ac4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	791b      	ldrb	r3, [r3, #4]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe fa0a 	bl	8000ec4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	795b      	ldrb	r3, [r3, #5]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_DAC_Start+0x1e>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e050      	b.n	8002b8c <HAL_DAC_Start+0xc0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	409a      	lsls	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11a      	bne.n	8002b46 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b26:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d127      	bne.n	8002b7e <HAL_DAC_Start+0xb2>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b38      	cmp	r3, #56	; 0x38
 8002b32:	d124      	bne.n	8002b7e <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e01b      	b.n	8002b7e <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b50:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002b5c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b64:	d10b      	bne.n	8002b7e <HAL_DAC_Start+0xb2>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002b6c:	d107      	bne.n	8002b7e <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0202 	orr.w	r2, r2, #2
 8002b7c:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	795b      	ldrb	r3, [r3, #5]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DAC_ConfigChannel+0x20>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e036      	b.n	8002c26 <HAL_DAC_ConfigChannel+0x8e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002bcc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	22c0      	movs	r2, #192	; 0xc0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	400a      	ands	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e16b      	b.n	8002f28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 815a 	bne.w	8002f22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d00b      	beq.n	8002c8e <HAL_GPIO_Init+0x5a>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c82:	2b11      	cmp	r3, #17
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0xfc>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b12      	cmp	r3, #18
 8002d2e:	d123      	bne.n	8002d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80b4 	beq.w	8002f22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <HAL_GPIO_Init+0x308>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a5e      	ldr	r2, [pc, #376]	; (8002f3c <HAL_GPIO_Init+0x308>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <HAL_GPIO_Init+0x308>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a51      	ldr	r2, [pc, #324]	; (8002f44 <HAL_GPIO_Init+0x310>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02b      	beq.n	8002e5a <HAL_GPIO_Init+0x226>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a50      	ldr	r2, [pc, #320]	; (8002f48 <HAL_GPIO_Init+0x314>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d025      	beq.n	8002e56 <HAL_GPIO_Init+0x222>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4f      	ldr	r2, [pc, #316]	; (8002f4c <HAL_GPIO_Init+0x318>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01f      	beq.n	8002e52 <HAL_GPIO_Init+0x21e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4e      	ldr	r2, [pc, #312]	; (8002f50 <HAL_GPIO_Init+0x31c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4d      	ldr	r2, [pc, #308]	; (8002f54 <HAL_GPIO_Init+0x320>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4c      	ldr	r2, [pc, #304]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4b      	ldr	r2, [pc, #300]	; (8002f5c <HAL_GPIO_Init+0x328>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4a      	ldr	r2, [pc, #296]	; (8002f60 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x20a>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e00e      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	e00c      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e42:	2306      	movs	r3, #6
 8002e44:	e00a      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e46:	2305      	movs	r3, #5
 8002e48:	e008      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e004      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_GPIO_Init+0x228>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	f002 0203 	and.w	r2, r2, #3
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	4093      	lsls	r3, r2
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e6c:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ea4:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <HAL_GPIO_Init+0x330>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	f67f ae90 	bls.w	8002c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	3724      	adds	r7, #36	; 0x24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40021c00 	.word	0x40021c00
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f84:	e003      	b.n	8002f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e25b      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d075      	beq.n	80030a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fba:	4ba3      	ldr	r3, [pc, #652]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc6:	4ba0      	ldr	r3, [pc, #640]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d112      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd2:	4b9d      	ldr	r3, [pc, #628]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	4b99      	ldr	r3, [pc, #612]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d05b      	beq.n	80030a4 <HAL_RCC_OscConfig+0x108>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d157      	bne.n	80030a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e236      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	d106      	bne.n	8003010 <HAL_RCC_OscConfig+0x74>
 8003002:	4b91      	ldr	r3, [pc, #580]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a90      	ldr	r2, [pc, #576]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e01d      	b.n	800304c <HAL_RCC_OscConfig+0xb0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x98>
 800301a:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a8a      	ldr	r2, [pc, #552]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a87      	ldr	r2, [pc, #540]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e00b      	b.n	800304c <HAL_RCC_OscConfig+0xb0>
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a83      	ldr	r2, [pc, #524]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	4b81      	ldr	r3, [pc, #516]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a80      	ldr	r2, [pc, #512]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d013      	beq.n	800307c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fd98 	bl	8001b88 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fd94 	bl	8001b88 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1fb      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0xc0>
 800307a:	e014      	b.n	80030a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fd84 	bl	8001b88 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fd80 	bl	8001b88 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1e7      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003096:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0xe8>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d063      	beq.n	800317a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030be:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d11c      	bne.n	8003104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ca:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d116      	bne.n	8003104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d6:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x152>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1bb      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ee:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4952      	ldr	r1, [pc, #328]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	e03a      	b.n	800317a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d020      	beq.n	800314e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	4b4f      	ldr	r3, [pc, #316]	; (800324c <HAL_RCC_OscConfig+0x2b0>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7fe fd39 	bl	8001b88 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800311a:	f7fe fd35 	bl	8001b88 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e19c      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312c:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4940      	ldr	r1, [pc, #256]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e015      	b.n	800317a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_OscConfig+0x2b0>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fd18 	bl	8001b88 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315c:	f7fe fd14 	bl	8001b88 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e17b      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d030      	beq.n	80031e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCC_OscConfig+0x2b4>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fe fcf8 	bl	8001b88 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe fcf4 	bl	8001b88 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e15b      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x200>
 80031ba:	e015      	b.n	80031e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x2b4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fce1 	bl	8001b88 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ca:	f7fe fcdd 	bl	8001b88 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e144      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a0 	beq.w	8003336 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_OscConfig+0x2b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d121      	bne.n	8003276 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_RCC_OscConfig+0x2b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_RCC_OscConfig+0x2b8>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe fca3 	bl	8001b88 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	e011      	b.n	800326a <HAL_RCC_OscConfig+0x2ce>
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
 8003254:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fe fc96 	bl	8001b88 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0fd      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x4d4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x2f0>
 800327e:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a7c      	ldr	r2, [pc, #496]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	e01c      	b.n	80032c6 <HAL_RCC_OscConfig+0x32a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b05      	cmp	r3, #5
 8003292:	d10c      	bne.n	80032ae <HAL_RCC_OscConfig+0x312>
 8003294:	4b77      	ldr	r3, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	4a76      	ldr	r2, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6713      	str	r3, [r2, #112]	; 0x70
 80032a0:	4b74      	ldr	r3, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a73      	ldr	r2, [pc, #460]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	e00b      	b.n	80032c6 <HAL_RCC_OscConfig+0x32a>
 80032ae:	4b71      	ldr	r3, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a70      	ldr	r2, [pc, #448]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a6d      	ldr	r2, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d015      	beq.n	80032fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe fc5b 	bl	8001b88 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe fc57 	bl	8001b88 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0bc      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ec:	4b61      	ldr	r3, [pc, #388]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ee      	beq.n	80032d6 <HAL_RCC_OscConfig+0x33a>
 80032f8:	e014      	b.n	8003324 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fc45 	bl	8001b88 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7fe fc41 	bl	8001b88 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0a6      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ee      	bne.n	8003302 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b52      	ldr	r3, [pc, #328]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a51      	ldr	r2, [pc, #324]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 8092 	beq.w	8003464 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d05c      	beq.n	8003406 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d141      	bne.n	80033d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_RCC_OscConfig+0x4dc>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe fc15 	bl	8001b88 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fc11 	bl	8001b88 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e078      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	019b      	lsls	r3, r3, #6
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	3b01      	subs	r3, #1
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	4933      	ldr	r1, [pc, #204]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4dc>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fbea 	bl	8001b88 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe fbe6 	bl	8001b88 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e04d      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x41c>
 80033d6:	e045      	b.n	8003464 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x4dc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe fbd3 	bl	8001b88 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe fbcf 	bl	8001b88 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e036      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x44a>
 8003404:	e02e      	b.n	8003464 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e029      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_RCC_OscConfig+0x4d8>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	429a      	cmp	r2, r3
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d115      	bne.n	8003460 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800343a:	4013      	ands	r3, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003440:	4293      	cmp	r3, r2
 8003442:	d10d      	bne.n	8003460 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d106      	bne.n	8003460 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000
 8003474:	40023800 	.word	0x40023800
 8003478:	42470060 	.word	0x42470060

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cc      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90c      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d044      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d119      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e067      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4934      	ldr	r1, [pc, #208]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fe fb0c 	bl	8001b88 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe fb08 	bl	8001b88 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d20c      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4601      	mov	r1, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	fa21 f303 	lsr.w	r3, r1, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe f908 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	08006b8c 	.word	0x08006b8c
 8003640:	20000010 	.word	0x20000010
 8003644:	20000014 	.word	0x20000014

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365e:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d007      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x32>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d008      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x38>
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 808d 	bne.w	800378e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003676:	60bb      	str	r3, [r7, #8]
       break;
 8003678:	e08c      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367a:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800367c:	60bb      	str	r3, [r7, #8]
      break;
 800367e:	e089      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003688:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	ea03 0501 	and.w	r5, r3, r1
 80036ac:	ea04 0602 	and.w	r6, r4, r2
 80036b0:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036b2:	fb02 f106 	mul.w	r1, r2, r6
 80036b6:	2200      	movs	r2, #0
 80036b8:	fb02 f205 	mul.w	r2, r2, r5
 80036bc:	440a      	add	r2, r1
 80036be:	493a      	ldr	r1, [pc, #232]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036c0:	fba5 0101 	umull	r0, r1, r5, r1
 80036c4:	1853      	adds	r3, r2, r1
 80036c6:	4619      	mov	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	f7fd f99b 	bl	8000a0c <__aeabi_uldivmod>
 80036d6:	4603      	mov	r3, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e049      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b30      	ldr	r3, [pc, #192]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	ea03 0501 	and.w	r5, r3, r1
 80036f4:	ea04 0602 	and.w	r6, r4, r2
 80036f8:	4629      	mov	r1, r5
 80036fa:	4632      	mov	r2, r6
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	0154      	lsls	r4, r2, #5
 8003706:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800370a:	014b      	lsls	r3, r1, #5
 800370c:	4619      	mov	r1, r3
 800370e:	4622      	mov	r2, r4
 8003710:	1b49      	subs	r1, r1, r5
 8003712:	eb62 0206 	sbc.w	r2, r2, r6
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	f04f 0400 	mov.w	r4, #0
 800371e:	0194      	lsls	r4, r2, #6
 8003720:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	1a5b      	subs	r3, r3, r1
 8003728:	eb64 0402 	sbc.w	r4, r4, r2
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	00e2      	lsls	r2, r4, #3
 8003736:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	195b      	adds	r3, r3, r5
 8003742:	eb44 0406 	adc.w	r4, r4, r6
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	02a2      	lsls	r2, r4, #10
 8003750:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003754:	0299      	lsls	r1, r3, #10
 8003756:	460b      	mov	r3, r1
 8003758:	4614      	mov	r4, r2
 800375a:	4618      	mov	r0, r3
 800375c:	4621      	mov	r1, r4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	f7fd f950 	bl	8000a0c <__aeabi_uldivmod>
 800376c:	4603      	mov	r3, r0
 800376e:	460c      	mov	r4, r1
 8003770:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	3301      	adds	r3, #1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	60bb      	str	r3, [r7, #8]
      break;
 800378c:	e002      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003790:	60bb      	str	r3, [r7, #8]
      break;
 8003792:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003794:	68bb      	ldr	r3, [r7, #8]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	017d7840 	.word	0x017d7840

080037ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b2:	681b      	ldr	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000010 	.word	0x20000010

080037c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037c8:	f7ff fff0 	bl	80037ac <HAL_RCC_GetHCLKFreq>
 80037cc:	4601      	mov	r1, r0
 80037ce:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037da:	5cd3      	ldrb	r3, [r2, r3]
 80037dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08006b9c 	.word	0x08006b9c

080037ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	220f      	movs	r2, #15
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_GetClockConfig+0x5c>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0203 	and.w	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_RCC_GetClockConfig+0x5c>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_RCC_GetClockConfig+0x5c>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_GetClockConfig+0x5c>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCC_GetClockConfig+0x60>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	601a      	str	r2, [r3, #0]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	40023c00 	.word	0x40023c00

08003850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01d      	b.n	800389e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f815 	bl	80038a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fa30 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b06      	cmp	r3, #6
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e083      	b.n	8003a1e <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fe f884 	bl	8001a38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003946:	f023 0307 	bic.w	r3, r3, #7
 800394a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f000 f9cc 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003984:	f023 0303 	bic.w	r3, r3, #3
 8003988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	4313      	orrs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039a2:	f023 030c 	bic.w	r3, r3, #12
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	4313      	orrs	r3, r2
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	011a      	lsls	r2, r3, #4
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	4313      	orrs	r3, r2
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4313      	orrs	r3, r2
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_TIM_Encoder_Start+0x16>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d008      	beq.n	8003a4c <HAL_TIM_Encoder_Start+0x26>
 8003a3a:	e00f      	b.n	8003a5c <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2201      	movs	r2, #1
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f9f5 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 8003a4a:	e016      	b.n	8003a7a <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2201      	movs	r2, #1
 8003a52:	2104      	movs	r1, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f9ed 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 8003a5a:	e00e      	b.n	8003a7a <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f9e5 	bl	8003e34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2104      	movs	r1, #4
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f9de 	bl	8003e34 <TIM_CCxChannelCmd>
      break;
 8003a78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0202 	mvn.w	r2, #2
 8003ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8ee 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8e0 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8f1 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0204 	mvn.w	r2, #4
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8c4 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8b6 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8c7 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0208 	mvn.w	r2, #8
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f89a 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f88c 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f89d 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f870 	bl	8003cb8 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f862 	bl	8003ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f873 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0201 	mvn.w	r2, #1
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fdc8 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9a4 	bl	8003f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f838 	bl	8003ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0220 	mvn.w	r2, #32
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f96e 	bl	8003f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3d      	ldr	r2, [pc, #244]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d027      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d023      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d017      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <TIM_Base_SetConfig+0x128>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	2201      	movs	r2, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e05a      	b.n	8003f4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d022      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee4:	d01d      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00e      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40001800 	.word	0x40001800

08003f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb6:	f3ef 8305 	mrs	r3, IPSR
 8003fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10f      	bne.n	8003fe2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc6:	607b      	str	r3, [r7, #4]
  return(result);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fce:	f3ef 8311 	mrs	r3, BASEPRI
 8003fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <osKernelInitialize+0x3a>
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <osKernelInitialize+0x64>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d103      	bne.n	8003fea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003fe2:	f06f 0305 	mvn.w	r3, #5
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e00c      	b.n	8004004 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <osKernelInitialize+0x64>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <osKernelInitialize+0x64>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004002:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000090 	.word	0x20000090

08004018 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800401e:	f3ef 8305 	mrs	r3, IPSR
 8004022:	60bb      	str	r3, [r7, #8]
  return(result);
 8004024:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	607b      	str	r3, [r7, #4]
  return(result);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004036:	f3ef 8311 	mrs	r3, BASEPRI
 800403a:	603b      	str	r3, [r7, #0]
  return(result);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <osKernelStart+0x3a>
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <osKernelStart+0x68>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d103      	bne.n	8004052 <osKernelStart+0x3a>
    stat = osErrorISR;
 800404a:	f06f 0305 	mvn.w	r3, #5
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e010      	b.n	8004074 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <osKernelStart+0x68>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d109      	bne.n	800406e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800405a:	f7ff ffa1 	bl	8003fa0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <osKernelStart+0x68>)
 8004060:	2202      	movs	r2, #2
 8004062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004064:	f001 f870 	bl	8005148 <vTaskStartScheduler>
      stat = osOK;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e002      	b.n	8004074 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004074:	68fb      	ldr	r3, [r7, #12]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000090 	.word	0x20000090

08004084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b090      	sub	sp, #64	; 0x40
 8004088:	af04      	add	r7, sp, #16
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004094:	f3ef 8305 	mrs	r3, IPSR
 8004098:	61fb      	str	r3, [r7, #28]
  return(result);
 800409a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 808f 	bne.w	80041c0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a2:	f3ef 8310 	mrs	r3, PRIMASK
 80040a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ae:	f3ef 8311 	mrs	r3, BASEPRI
 80040b2:	617b      	str	r3, [r7, #20]
  return(result);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osThreadNew+0x3e>
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <osThreadNew+0x148>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d07e      	beq.n	80041c0 <osThreadNew+0x13c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d07b      	beq.n	80041c0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80040cc:	2318      	movs	r3, #24
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d045      	beq.n	800416c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <osThreadNew+0x6a>
        name = attr->name;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <osThreadNew+0x90>
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b38      	cmp	r3, #56	; 0x38
 8004106:	d805      	bhi.n	8004114 <osThreadNew+0x90>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <osThreadNew+0x94>
        return (NULL);
 8004114:	2300      	movs	r3, #0
 8004116:	e054      	b.n	80041c2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <osThreadNew+0xca>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b5b      	cmp	r3, #91	; 0x5b
 8004136:	d90a      	bls.n	800414e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <osThreadNew+0xca>
        mem = 1;
 8004148:	2301      	movs	r3, #1
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	e010      	b.n	8004170 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10c      	bne.n	8004170 <osThreadNew+0xec>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d108      	bne.n	8004170 <osThreadNew+0xec>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d104      	bne.n	8004170 <osThreadNew+0xec>
          mem = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	e001      	b.n	8004170 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d110      	bne.n	8004198 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800417e:	9202      	str	r2, [sp, #8]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fe09 	bl	8004da4 <xTaskCreateStatic>
 8004192:	4603      	mov	r3, r0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	e013      	b.n	80041c0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	f107 0310 	add.w	r3, r7, #16
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fe51 	bl	8004e58 <xTaskCreate>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <osThreadNew+0x13c>
          hTask = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041c0:	693b      	ldr	r3, [r7, #16]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3730      	adds	r7, #48	; 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000090 	.word	0x20000090

080041d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d8:	f3ef 8305 	mrs	r3, IPSR
 80041dc:	613b      	str	r3, [r7, #16]
  return(result);
 80041de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e4:	f3ef 8310 	mrs	r3, PRIMASK
 80041e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f0:	f3ef 8311 	mrs	r3, BASEPRI
 80041f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <osDelay+0x3c>
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <osDelay+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d103      	bne.n	800420c <osDelay+0x3c>
    stat = osErrorISR;
 8004204:	f06f 0305 	mvn.w	r3, #5
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e007      	b.n	800421c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 ff62 	bl	80050e0 <vTaskDelay>
    }
  }

  return (stat);
 800421c:	697b      	ldr	r3, [r7, #20]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000090 	.word	0x20000090

0800422c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <vApplicationGetIdleTaskMemory+0x2c>)
 800423c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a06      	ldr	r2, [pc, #24]	; (800425c <vApplicationGetIdleTaskMemory+0x30>)
 8004242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000094 	.word	0x20000094
 800425c:	200000f0 	.word	0x200000f0

08004260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <vApplicationGetTimerTaskMemory+0x2c>)
 8004270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a06      	ldr	r2, [pc, #24]	; (8004290 <vApplicationGetTimerTaskMemory+0x30>)
 8004276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	200002f0 	.word	0x200002f0
 8004290:	2000034c 	.word	0x2000034c

08004294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 0208 	add.w	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f103 0208 	add.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434c:	d103      	bne.n	8004356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3308      	adds	r3, #8
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <vListInsert+0x2e>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d2f6      	bcs.n	800435e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6852      	ldr	r2, [r2, #4]
 80043c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d103      	bne.n	80043dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d109      	bne.n	8004424 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	e7fe      	b.n	8004422 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004424:	f002 f812 	bl	800644c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004454:	3b01      	subs	r3, #1
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	22ff      	movs	r2, #255	; 0xff
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d114      	bne.n	80044a4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01a      	beq.n	80044b8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3310      	adds	r3, #16
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f8de 	bl	8005648 <xTaskRemoveFromEventList>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <xQueueGenericReset+0xcc>)
 8004494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	e009      	b.n	80044b8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3310      	adds	r3, #16
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fef3 	bl	8004294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3324      	adds	r3, #36	; 0x24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff feee 	bl	8004294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044b8:	f001 fff6 	bl	80064a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044bc:	2301      	movs	r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08e      	sub	sp, #56	; 0x38
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <xQueueGenericCreateStatic+0x28>
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <xQueueGenericCreateStatic+0x42>
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	e7fe      	b.n	800450c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <xQueueGenericCreateStatic+0x4e>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <xQueueGenericCreateStatic+0x52>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xQueueGenericCreateStatic+0x54>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <xQueueGenericCreateStatic+0x6c>
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	623b      	str	r3, [r7, #32]
 8004536:	e7fe      	b.n	8004536 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <xQueueGenericCreateStatic+0x78>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <xQueueGenericCreateStatic+0x7c>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <xQueueGenericCreateStatic+0x7e>
 8004548:	2300      	movs	r3, #0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <xQueueGenericCreateStatic+0x96>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004562:	2350      	movs	r3, #80	; 0x50
 8004564:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b50      	cmp	r3, #80	; 0x50
 800456a:	d009      	beq.n	8004580 <xQueueGenericCreateStatic+0xb4>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e7fe      	b.n	800457e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004580:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004594:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f805 	bl	80045b2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3730      	adds	r7, #48	; 0x30
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045e0:	2101      	movs	r1, #1
 80045e2:	69b8      	ldr	r0, [r7, #24]
 80045e4:	f7ff ff0a 	bl	80043fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08e      	sub	sp, #56	; 0x38
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004606:	2300      	movs	r3, #0
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xQueueGenericSend+0x30>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	e7fe      	b.n	8004626 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <xQueueGenericSend+0x3e>
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xQueueGenericSend+0x42>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xQueueGenericSend+0x44>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <xQueueGenericSend+0x5c>
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d103      	bne.n	8004662 <xQueueGenericSend+0x6a>
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <xQueueGenericSend+0x6e>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <xQueueGenericSend+0x70>
 8004666:	2300      	movs	r3, #0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <xQueueGenericSend+0x88>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	e7fe      	b.n	800467e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004680:	f001 f998 	bl	80059b4 <xTaskGetSchedulerState>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <xQueueGenericSend+0x98>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <xQueueGenericSend+0x9c>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <xQueueGenericSend+0x9e>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <xQueueGenericSend+0xb6>
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e7fe      	b.n	80046ac <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ae:	f001 fecd 	bl	800644c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <xQueueGenericSend+0xcc>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d129      	bne.n	8004718 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ca:	f000 f9ff 	bl	8004acc <prvCopyDataToQueue>
 80046ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d010      	beq.n	80046fa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	3324      	adds	r3, #36	; 0x24
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 ffb3 	bl	8005648 <xTaskRemoveFromEventList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046e8:	4b3f      	ldr	r3, [pc, #252]	; (80047e8 <xQueueGenericSend+0x1f0>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	e00a      	b.n	8004710 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004700:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <xQueueGenericSend+0x1f0>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004710:	f001 feca 	bl	80064a8 <vPortExitCritical>
				return pdPASS;
 8004714:	2301      	movs	r3, #1
 8004716:	e063      	b.n	80047e0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471e:	f001 fec3 	bl	80064a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004722:	2300      	movs	r3, #0
 8004724:	e05c      	b.n	80047e0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4618      	mov	r0, r3
 8004732:	f000 ffeb 	bl	800570c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473a:	f001 feb5 	bl	80064a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473e:	f000 fd67 	bl	8005210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004742:	f001 fe83 	bl	800644c <vPortEnterCritical>
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474c:	b25b      	sxtb	r3, r3
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004752:	d103      	bne.n	800475c <xQueueGenericSend+0x164>
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004762:	b25b      	sxtb	r3, r3
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004768:	d103      	bne.n	8004772 <xQueueGenericSend+0x17a>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004772:	f001 fe99 	bl	80064a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004776:	1d3a      	adds	r2, r7, #4
 8004778:	f107 0314 	add.w	r3, r7, #20
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ffda 	bl	8005738 <xTaskCheckForTimeOut>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d124      	bne.n	80047d4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800478a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478c:	f000 fa96 	bl	8004cbc <prvIsQueueFull>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d018      	beq.n	80047c8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	3310      	adds	r3, #16
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4611      	mov	r1, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 ff04 	bl	80055ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a6:	f000 fa21 	bl	8004bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047aa:	f000 fd3f 	bl	800522c <xTaskResumeAll>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f47f af7c 	bne.w	80046ae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047b6:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <xQueueGenericSend+0x1f0>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	e772      	b.n	80046ae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ca:	f000 fa0f 	bl	8004bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ce:	f000 fd2d 	bl	800522c <xTaskResumeAll>
 80047d2:	e76c      	b.n	80046ae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d6:	f000 fa09 	bl	8004bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047da:	f000 fd27 	bl	800522c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3738      	adds	r7, #56	; 0x38
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08e      	sub	sp, #56	; 0x38
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <xQueueGenericSendFromISR+0x2c>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	e7fe      	b.n	8004816 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <xQueueGenericSendFromISR+0x3a>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <xQueueGenericSendFromISR+0x3e>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <xQueueGenericSendFromISR+0x40>
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <xQueueGenericSendFromISR+0x58>
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	623b      	str	r3, [r7, #32]
 8004842:	e7fe      	b.n	8004842 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d103      	bne.n	8004852 <xQueueGenericSendFromISR+0x66>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <xQueueGenericSendFromISR+0x6a>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xQueueGenericSendFromISR+0x6c>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d109      	bne.n	8004870 <xQueueGenericSendFromISR+0x84>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e7fe      	b.n	800486e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004870:	f001 fec8 	bl	8006604 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004874:	f3ef 8211 	mrs	r2, BASEPRI
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	61ba      	str	r2, [r7, #24]
 800488a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800488c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <xQueueGenericSendFromISR+0xb6>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d12c      	bne.n	80048fc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 f90b 	bl	8004acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048be:	d112      	bne.n	80048e6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d016      	beq.n	80048f6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	3324      	adds	r3, #36	; 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 febb 	bl	8005648 <xTaskRemoveFromEventList>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e007      	b.n	80048f6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048ea:	3301      	adds	r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	b25a      	sxtb	r2, r3
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048f6:	2301      	movs	r3, #1
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048fa:	e001      	b.n	8004900 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800490c:	4618      	mov	r0, r3
 800490e:	3738      	adds	r7, #56	; 0x38
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08c      	sub	sp, #48	; 0x30
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004920:	2300      	movs	r3, #0
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <xQueueReceive+0x2e>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	623b      	str	r3, [r7, #32]
 8004940:	e7fe      	b.n	8004940 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <xQueueReceive+0x3c>
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <xQueueReceive+0x40>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <xQueueReceive+0x42>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <xQueueReceive+0x5a>
 800495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e7fe      	b.n	800496c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800496e:	f001 f821 	bl	80059b4 <xTaskGetSchedulerState>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <xQueueReceive+0x6a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <xQueueReceive+0x6e>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <xQueueReceive+0x70>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <xQueueReceive+0x88>
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e7fe      	b.n	800499a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800499c:	f001 fd56 	bl	800644c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01f      	beq.n	80049ec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f000 f8f6 	bl	8004ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	1e5a      	subs	r2, r3, #1
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	3310      	adds	r3, #16
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fe3d 	bl	8005648 <xTaskRemoveFromEventList>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049d4:	4b3c      	ldr	r3, [pc, #240]	; (8004ac8 <xQueueReceive+0x1b4>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049e4:	f001 fd60 	bl	80064a8 <vPortExitCritical>
				return pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e069      	b.n	8004ac0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f2:	f001 fd59 	bl	80064a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e062      	b.n	8004ac0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fe81 	bl	800570c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a0e:	f001 fd4b 	bl	80064a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a12:	f000 fbfd 	bl	8005210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a16:	f001 fd19 	bl	800644c <vPortEnterCritical>
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a26:	d103      	bne.n	8004a30 <xQueueReceive+0x11c>
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a36:	b25b      	sxtb	r3, r3
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3c:	d103      	bne.n	8004a46 <xQueueReceive+0x132>
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a46:	f001 fd2f 	bl	80064a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4a:	1d3a      	adds	r2, r7, #4
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fe70 	bl	8005738 <xTaskCheckForTimeOut>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d123      	bne.n	8004aa6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a60:	f000 f916 	bl	8004c90 <prvIsQueueEmpty>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d017      	beq.n	8004a9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fd9a 	bl	80055ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7a:	f000 f8b7 	bl	8004bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a7e:	f000 fbd5 	bl	800522c <xTaskResumeAll>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d189      	bne.n	800499c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <xQueueReceive+0x1b4>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	e780      	b.n	800499c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f000 f8a6 	bl	8004bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa0:	f000 fbc4 	bl	800522c <xTaskResumeAll>
 8004aa4:	e77a      	b.n	800499c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa8:	f000 f8a0 	bl	8004bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aac:	f000 fbbe 	bl	800522c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab2:	f000 f8ed 	bl	8004c90 <prvIsQueueEmpty>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f43f af6f 	beq.w	800499c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004abe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3730      	adds	r7, #48	; 0x30
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d14d      	bne.n	8004b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 ff7a 	bl	80059f0 <xTaskPriorityDisinherit>
 8004afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	e043      	b.n	8004b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d119      	bne.n	8004b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6858      	ldr	r0, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	461a      	mov	r2, r3
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	f001 ffac 	bl	8006a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d32b      	bcc.n	8004b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e026      	b.n	8004b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68d8      	ldr	r0, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	f001 ff92 	bl	8006a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	425b      	negs	r3, r3
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d207      	bcs.n	8004b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	425b      	negs	r3, r3
 8004b76:	441a      	add	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d105      	bne.n	8004b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d303      	bcc.n	8004bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6838      	ldr	r0, [r7, #0]
 8004be0:	f001 ff48 	bl	8006a74 <memcpy>
	}
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bf4:	f001 fc2a 	bl	800644c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c00:	e011      	b.n	8004c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fd1a 	bl	8005648 <xTaskRemoveFromEventList>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c1a:	f000 fded 	bl	80057f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dce9      	bgt.n	8004c02 <prvUnlockQueue+0x16>
 8004c2e:	e000      	b.n	8004c32 <prvUnlockQueue+0x46>
					break;
 8004c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 fc35 	bl	80064a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c3e:	f001 fc05 	bl	800644c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c4a:	e011      	b.n	8004c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3310      	adds	r3, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fcf5 	bl	8005648 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c64:	f000 fdc8 	bl	80057f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dce9      	bgt.n	8004c4c <prvUnlockQueue+0x60>
 8004c78:	e000      	b.n	8004c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	22ff      	movs	r2, #255	; 0xff
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c84:	f001 fc10 	bl	80064a8 <vPortExitCritical>
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c98:	f001 fbd8 	bl	800644c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e001      	b.n	8004cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cae:	f001 fbfb 	bl	80064a8 <vPortExitCritical>

	return xReturn;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc4:	f001 fbc2 	bl	800644c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d102      	bne.n	8004cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e001      	b.n	8004cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cde:	f001 fbe3 	bl	80064a8 <vPortExitCritical>

	return xReturn;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e014      	b.n	8004d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <vQueueAddToRegistry+0x4c>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d08:	490b      	ldr	r1, [pc, #44]	; (8004d38 <vQueueAddToRegistry+0x4c>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <vQueueAddToRegistry+0x4c>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d1e:	e005      	b.n	8004d2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	d9e7      	bls.n	8004cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20004a98 	.word	0x20004a98

08004d3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d4c:	f001 fb7e 	bl	800644c <vPortEnterCritical>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5c:	d103      	bne.n	8004d66 <vQueueWaitForMessageRestricted+0x2a>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d72:	d103      	bne.n	8004d7c <vQueueWaitForMessageRestricted+0x40>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7c:	f001 fb94 	bl	80064a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d106      	bne.n	8004d96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3324      	adds	r3, #36	; 0x24
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fc2f 	bl	80055f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ff28 	bl	8004bec <prvUnlockQueue>
	}
 8004d9c:	bf00      	nop
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08e      	sub	sp, #56	; 0x38
 8004da8:	af04      	add	r7, sp, #16
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <xTaskCreateStatic+0x28>
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	e7fe      	b.n	8004dca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <xTaskCreateStatic+0x42>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	e7fe      	b.n	8004de4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004de6:	235c      	movs	r3, #92	; 0x5c
 8004de8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b5c      	cmp	r3, #92	; 0x5c
 8004dee:	d009      	beq.n	8004e04 <xTaskCreateStatic+0x60>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e7fe      	b.n	8004e02 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01e      	beq.n	8004e4a <xTaskCreateStatic+0xa6>
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01b      	beq.n	8004e4a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e24:	2300      	movs	r3, #0
 8004e26:	9303      	str	r3, [sp, #12]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	9302      	str	r3, [sp, #8]
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f850 	bl	8004ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e44:	f000 f8dc 	bl	8005000 <prvAddNewTaskToReadyList>
 8004e48:	e001      	b.n	8004e4e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e4e:	697b      	ldr	r3, [r7, #20]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3728      	adds	r7, #40	; 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af04      	add	r7, sp, #16
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fc07 	bl	8006680 <pvPortMalloc>
 8004e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00e      	beq.n	8004e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e7a:	205c      	movs	r0, #92	; 0x5c
 8004e7c:	f001 fc00 	bl	8006680 <pvPortMalloc>
 8004e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e8e:	e005      	b.n	8004e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e90:	6978      	ldr	r0, [r7, #20]
 8004e92:	f001 fcb7 	bl	8006804 <vPortFree>
 8004e96:	e001      	b.n	8004e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d017      	beq.n	8004ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	9302      	str	r3, [sp, #8]
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f80e 	bl	8004ee2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ec6:	69f8      	ldr	r0, [r7, #28]
 8004ec8:	f000 f89a 	bl	8005000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	e002      	b.n	8004ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	21a5      	movs	r1, #165	; 0xa5
 8004efc:	f001 fdc5 	bl	8006a8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <prvInitialiseNewTask+0x56>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	e7fe      	b.n	8004f36 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01f      	beq.n	8004f7e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e012      	b.n	8004f6a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	7819      	ldrb	r1, [r3, #0]
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	3334      	adds	r3, #52	; 0x34
 8004f54:	460a      	mov	r2, r1
 8004f56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d006      	beq.n	8004f72 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d9e9      	bls.n	8004f44 <prvInitialiseNewTask+0x62>
 8004f70:	e000      	b.n	8004f74 <prvInitialiseNewTask+0x92>
			{
				break;
 8004f72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f7c:	e003      	b.n	8004f86 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2b37      	cmp	r3, #55	; 0x37
 8004f8a:	d901      	bls.n	8004f90 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f8c:	2337      	movs	r3, #55	; 0x37
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff f994 	bl	80042d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	3318      	adds	r3, #24
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff f98f 	bl	80042d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	68f9      	ldr	r1, [r7, #12]
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	f001 f90c 	bl	80061fc <pxPortInitialiseStack>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005008:	f001 fa20 	bl	800644c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800500c:	4b2d      	ldr	r3, [pc, #180]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3301      	adds	r3, #1
 8005012:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005016:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800501e:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <prvAddNewTaskToReadyList+0xc4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d110      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800502c:	f000 fc08 	bl	8005840 <prvInitialiseTaskLists>
 8005030:	e00d      	b.n	800504e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005032:	4b26      	ldr	r3, [pc, #152]	; (80050cc <prvAddNewTaskToReadyList+0xcc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 8005056:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <prvAddNewTaskToReadyList+0xd0>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <prvAddNewTaskToReadyList+0xd4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d903      	bls.n	8005074 <prvAddNewTaskToReadyList+0x74>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <prvAddNewTaskToReadyList+0xd4>)
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <prvAddNewTaskToReadyList+0xd8>)
 8005082:	441a      	add	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7ff f92f 	bl	80042ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005090:	f001 fa0a 	bl	80064a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <prvAddNewTaskToReadyList+0xcc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvAddNewTaskToReadyList+0xc8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d207      	bcs.n	80050ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <prvAddNewTaskToReadyList+0xdc>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000c20 	.word	0x20000c20
 80050c8:	2000074c 	.word	0x2000074c
 80050cc:	20000c2c 	.word	0x20000c2c
 80050d0:	20000c3c 	.word	0x20000c3c
 80050d4:	20000c28 	.word	0x20000c28
 80050d8:	20000750 	.word	0x20000750
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <vTaskDelay+0x60>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <vTaskDelay+0x2e>
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	e7fe      	b.n	800510c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800510e:	f000 f87f 	bl	8005210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005112:	2100      	movs	r1, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fcd7 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800511a:	f000 f887 	bl	800522c <xTaskResumeAll>
 800511e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vTaskDelay+0x64>)
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000c48 	.word	0x20000c48
 8005144:	e000ed04 	.word	0xe000ed04

08005148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005156:	463a      	mov	r2, r7
 8005158:	1d39      	adds	r1, r7, #4
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f864 	bl	800422c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	9202      	str	r2, [sp, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	2300      	movs	r3, #0
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	460a      	mov	r2, r1
 8005176:	4920      	ldr	r1, [pc, #128]	; (80051f8 <vTaskStartScheduler+0xb0>)
 8005178:	4820      	ldr	r0, [pc, #128]	; (80051fc <vTaskStartScheduler+0xb4>)
 800517a:	f7ff fe13 	bl	8004da4 <xTaskCreateStatic>
 800517e:	4602      	mov	r2, r0
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <vTaskStartScheduler+0xb8>)
 8005182:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <vTaskStartScheduler+0xb8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	e001      	b.n	8005196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d102      	bne.n	80051a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800519c:	f000 fce8 	bl	8005b70 <xTimerCreateTimerTask>
 80051a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d115      	bne.n	80051d4 <vTaskStartScheduler+0x8c>
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <vTaskStartScheduler+0xbc>)
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <vTaskStartScheduler+0xc0>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <vTaskStartScheduler+0xc4>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ce:	f001 f89f 	bl	8006310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051d2:	e00d      	b.n	80051f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d109      	bne.n	80051f0 <vTaskStartScheduler+0xa8>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e7fe      	b.n	80051ee <vTaskStartScheduler+0xa6>
}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08006ae4 	.word	0x08006ae4
 80051fc:	08005811 	.word	0x08005811
 8005200:	20000c44 	.word	0x20000c44
 8005204:	20000c40 	.word	0x20000c40
 8005208:	20000c2c 	.word	0x20000c2c
 800520c:	20000c24 	.word	0x20000c24

08005210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <vTaskSuspendAll+0x18>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	4a03      	ldr	r2, [pc, #12]	; (8005228 <vTaskSuspendAll+0x18>)
 800521c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000c48 	.word	0x20000c48

0800522c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <xTaskResumeAll+0x114>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <xTaskResumeAll+0x2a>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	e7fe      	b.n	8005254 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005256:	f001 f8f9 	bl	800644c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <xTaskResumeAll+0x114>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3b01      	subs	r3, #1
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <xTaskResumeAll+0x114>)
 8005262:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <xTaskResumeAll+0x114>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d162      	bne.n	8005332 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <xTaskResumeAll+0x118>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d05e      	beq.n	8005332 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005274:	e02f      	b.n	80052d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <xTaskResumeAll+0x11c>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3318      	adds	r3, #24
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f890 	bl	80043a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f88b 	bl	80043a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <xTaskResumeAll+0x120>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <xTaskResumeAll+0x7a>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	4a2a      	ldr	r2, [pc, #168]	; (800534c <xTaskResumeAll+0x120>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a27      	ldr	r2, [pc, #156]	; (8005350 <xTaskResumeAll+0x124>)
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7ff f816 	bl	80042ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	4b23      	ldr	r3, [pc, #140]	; (8005354 <xTaskResumeAll+0x128>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <xTaskResumeAll+0x12c>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <xTaskResumeAll+0x11c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1cb      	bne.n	8005276 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052e4:	f000 fb46 	bl	8005974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <xTaskResumeAll+0x130>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052f4:	f000 f846 	bl	8005384 <xTaskIncrementTick>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <xTaskResumeAll+0x12c>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f1      	bne.n	80052f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005310:	4b12      	ldr	r3, [pc, #72]	; (800535c <xTaskResumeAll+0x130>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <xTaskResumeAll+0x12c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800531e:	2301      	movs	r3, #1
 8005320:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <xTaskResumeAll+0x134>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005332:	f001 f8b9 	bl	80064a8 <vPortExitCritical>

	return xAlreadyYielded;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000c48 	.word	0x20000c48
 8005344:	20000c20 	.word	0x20000c20
 8005348:	20000be0 	.word	0x20000be0
 800534c:	20000c28 	.word	0x20000c28
 8005350:	20000750 	.word	0x20000750
 8005354:	2000074c 	.word	0x2000074c
 8005358:	20000c34 	.word	0x20000c34
 800535c:	20000c30 	.word	0x20000c30
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <xTaskGetTickCount+0x1c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005370:	687b      	ldr	r3, [r7, #4]
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000c24 	.word	0x20000c24

08005384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800538e:	4b4e      	ldr	r3, [pc, #312]	; (80054c8 <xTaskIncrementTick+0x144>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f040 8088 	bne.w	80054a8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005398:	4b4c      	ldr	r3, [pc, #304]	; (80054cc <xTaskIncrementTick+0x148>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053a0:	4a4a      	ldr	r2, [pc, #296]	; (80054cc <xTaskIncrementTick+0x148>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d11f      	bne.n	80053ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80053ac:	4b48      	ldr	r3, [pc, #288]	; (80054d0 <xTaskIncrementTick+0x14c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <xTaskIncrementTick+0x46>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	e7fe      	b.n	80053c8 <xTaskIncrementTick+0x44>
 80053ca:	4b41      	ldr	r3, [pc, #260]	; (80054d0 <xTaskIncrementTick+0x14c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	4b40      	ldr	r3, [pc, #256]	; (80054d4 <xTaskIncrementTick+0x150>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a3e      	ldr	r2, [pc, #248]	; (80054d0 <xTaskIncrementTick+0x14c>)
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	4a3e      	ldr	r2, [pc, #248]	; (80054d4 <xTaskIncrementTick+0x150>)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b3e      	ldr	r3, [pc, #248]	; (80054d8 <xTaskIncrementTick+0x154>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <xTaskIncrementTick+0x154>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	f000 fac4 	bl	8005974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053ec:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <xTaskIncrementTick+0x158>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d349      	bcc.n	800548a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053f6:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <xTaskIncrementTick+0x14c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005400:	4b36      	ldr	r3, [pc, #216]	; (80054dc <xTaskIncrementTick+0x158>)
 8005402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005406:	601a      	str	r2, [r3, #0]
					break;
 8005408:	e03f      	b.n	800548a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540a:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <xTaskIncrementTick+0x14c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	429a      	cmp	r2, r3
 8005420:	d203      	bcs.n	800542a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005422:	4a2e      	ldr	r2, [pc, #184]	; (80054dc <xTaskIncrementTick+0x158>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005428:	e02f      	b.n	800548a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ffba 	bl	80043a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3318      	adds	r3, #24
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe ffb1 	bl	80043a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <xTaskIncrementTick+0x15c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d903      	bls.n	800545a <xTaskIncrementTick+0xd6>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <xTaskIncrementTick+0x15c>)
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <xTaskIncrementTick+0x160>)
 8005468:	441a      	add	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fe ff3c 	bl	80042ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <xTaskIncrementTick+0x164>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	429a      	cmp	r2, r3
 8005482:	d3b8      	bcc.n	80053f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005488:	e7b5      	b.n	80053f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800548a:	4b17      	ldr	r3, [pc, #92]	; (80054e8 <xTaskIncrementTick+0x164>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	4914      	ldr	r1, [pc, #80]	; (80054e4 <xTaskIncrementTick+0x160>)
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d907      	bls.n	80054b2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80054a2:	2301      	movs	r3, #1
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e004      	b.n	80054b2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054a8:	4b10      	ldr	r3, [pc, #64]	; (80054ec <xTaskIncrementTick+0x168>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <xTaskIncrementTick+0x168>)
 80054b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <xTaskIncrementTick+0x16c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054be:	697b      	ldr	r3, [r7, #20]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000c48 	.word	0x20000c48
 80054cc:	20000c24 	.word	0x20000c24
 80054d0:	20000bd8 	.word	0x20000bd8
 80054d4:	20000bdc 	.word	0x20000bdc
 80054d8:	20000c38 	.word	0x20000c38
 80054dc:	20000c40 	.word	0x20000c40
 80054e0:	20000c28 	.word	0x20000c28
 80054e4:	20000750 	.word	0x20000750
 80054e8:	2000074c 	.word	0x2000074c
 80054ec:	20000c30 	.word	0x20000c30
 80054f0:	20000c34 	.word	0x20000c34

080054f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054fa:	4b27      	ldr	r3, [pc, #156]	; (8005598 <vTaskSwitchContext+0xa4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <vTaskSwitchContext+0xa8>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005508:	e040      	b.n	800558c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <vTaskSwitchContext+0xa8>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005510:	4b23      	ldr	r3, [pc, #140]	; (80055a0 <vTaskSwitchContext+0xac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e00f      	b.n	8005538 <vTaskSwitchContext+0x44>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <vTaskSwitchContext+0x3e>
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e7fe      	b.n	8005530 <vTaskSwitchContext+0x3c>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	491a      	ldr	r1, [pc, #104]	; (80055a4 <vTaskSwitchContext+0xb0>)
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0e5      	beq.n	8005518 <vTaskSwitchContext+0x24>
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <vTaskSwitchContext+0xb0>)
 8005558:	4413      	add	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3308      	adds	r3, #8
 800556e:	429a      	cmp	r2, r3
 8005570:	d104      	bne.n	800557c <vTaskSwitchContext+0x88>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	605a      	str	r2, [r3, #4]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <vTaskSwitchContext+0xb4>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <vTaskSwitchContext+0xac>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20000c48 	.word	0x20000c48
 800559c:	20000c34 	.word	0x20000c34
 80055a0:	20000c28 	.word	0x20000c28
 80055a4:	20000750 	.word	0x20000750
 80055a8:	2000074c 	.word	0x2000074c

080055ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <vTaskPlaceOnEventList+0x24>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e7fe      	b.n	80055ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055d0:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <vTaskPlaceOnEventList+0x44>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3318      	adds	r3, #24
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fe feac 	bl	8004336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055de:	2101      	movs	r1, #1
 80055e0:	6838      	ldr	r0, [r7, #0]
 80055e2:	f000 fa71 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000074c 	.word	0x2000074c

080055f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <vTaskPlaceOnEventListRestricted+0x26>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e7fe      	b.n	8005618 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <vTaskPlaceOnEventListRestricted+0x50>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3318      	adds	r3, #24
 8005620:	4619      	mov	r1, r3
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f7fe fe63 	bl	80042ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005632:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f000 fa46 	bl	8005ac8 <prvAddCurrentTaskToDelayedList>
	}
 800563c:	bf00      	nop
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	2000074c 	.word	0x2000074c

08005648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <xTaskRemoveFromEventList+0x2a>
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e7fe      	b.n	8005670 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3318      	adds	r3, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fe96 	bl	80043a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <xTaskRemoveFromEventList+0xac>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d11d      	bne.n	80056c0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3304      	adds	r3, #4
 8005688:	4618      	mov	r0, r3
 800568a:	f7fe fe8d 	bl	80043a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005692:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <xTaskRemoveFromEventList+0xb0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d903      	bls.n	80056a2 <xTaskRemoveFromEventList+0x5a>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <xTaskRemoveFromEventList+0xb0>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <xTaskRemoveFromEventList+0xb4>)
 80056b0:	441a      	add	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3304      	adds	r3, #4
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7fe fe18 	bl	80042ee <vListInsertEnd>
 80056be:	e005      	b.n	80056cc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3318      	adds	r3, #24
 80056c4:	4619      	mov	r1, r3
 80056c6:	480e      	ldr	r0, [pc, #56]	; (8005700 <xTaskRemoveFromEventList+0xb8>)
 80056c8:	f7fe fe11 	bl	80042ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <xTaskRemoveFromEventList+0xbc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d905      	bls.n	80056e6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <xTaskRemoveFromEventList+0xc0>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e001      	b.n	80056ea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000c48 	.word	0x20000c48
 80056f8:	20000c28 	.word	0x20000c28
 80056fc:	20000750 	.word	0x20000750
 8005700:	20000be0 	.word	0x20000be0
 8005704:	2000074c 	.word	0x2000074c
 8005708:	20000c34 	.word	0x20000c34

0800570c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <vTaskInternalSetTimeOutState+0x24>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <vTaskInternalSetTimeOutState+0x28>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	605a      	str	r2, [r3, #4]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20000c38 	.word	0x20000c38
 8005734:	20000c24 	.word	0x20000c24

08005738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <xTaskCheckForTimeOut+0x24>
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	e7fe      	b.n	800575a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <xTaskCheckForTimeOut+0x3e>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	e7fe      	b.n	8005774 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005776:	f000 fe69 	bl	800644c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <xTaskCheckForTimeOut+0xb8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005792:	d102      	bne.n	800579a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e023      	b.n	80057e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <xTaskCheckForTimeOut+0xbc>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d007      	beq.n	80057b6 <xTaskCheckForTimeOut+0x7e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d302      	bcc.n	80057b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e015      	b.n	80057e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d20b      	bcs.n	80057d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff ff9d 	bl	800570c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	e004      	b.n	80057e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057e2:	f000 fe61 	bl	80064a8 <vPortExitCritical>

	return xReturn;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000c24 	.word	0x20000c24
 80057f4:	20000c38 	.word	0x20000c38

080057f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <vTaskMissedYield+0x14>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000c34 	.word	0x20000c34

08005810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005818:	f000 f852 	bl	80058c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <prvIdleTask+0x28>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d9f9      	bls.n	8005818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <prvIdleTask+0x2c>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005834:	e7f0      	b.n	8005818 <prvIdleTask+0x8>
 8005836:	bf00      	nop
 8005838:	20000750 	.word	0x20000750
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <prvInitialiseTaskLists+0x60>)
 8005858:	4413      	add	r3, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fd1a 	bl	8004294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b37      	cmp	r3, #55	; 0x37
 800586a:	d9ef      	bls.n	800584c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800586c:	480d      	ldr	r0, [pc, #52]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800586e:	f7fe fd11 	bl	8004294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005872:	480d      	ldr	r0, [pc, #52]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005874:	f7fe fd0e 	bl	8004294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005878:	480c      	ldr	r0, [pc, #48]	; (80058ac <prvInitialiseTaskLists+0x6c>)
 800587a:	f7fe fd0b 	bl	8004294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <prvInitialiseTaskLists+0x70>)
 8005880:	f7fe fd08 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005884:	480b      	ldr	r0, [pc, #44]	; (80058b4 <prvInitialiseTaskLists+0x74>)
 8005886:	f7fe fd05 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800588a:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <prvInitialiseTaskLists+0x78>)
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <prvInitialiseTaskLists+0x64>)
 800588e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <prvInitialiseTaskLists+0x7c>)
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <prvInitialiseTaskLists+0x68>)
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000750 	.word	0x20000750
 80058a4:	20000bb0 	.word	0x20000bb0
 80058a8:	20000bc4 	.word	0x20000bc4
 80058ac:	20000be0 	.word	0x20000be0
 80058b0:	20000bf4 	.word	0x20000bf4
 80058b4:	20000c0c 	.word	0x20000c0c
 80058b8:	20000bd8 	.word	0x20000bd8
 80058bc:	20000bdc 	.word	0x20000bdc

080058c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c6:	e019      	b.n	80058fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058c8:	f000 fdc0 	bl	800644c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <prvCheckTasksWaitingTermination+0x4c>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fd65 	bl	80043a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <prvCheckTasksWaitingTermination+0x50>)
 80058e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058f2:	f000 fdd9 	bl	80064a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f80e 	bl	8005918 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <prvCheckTasksWaitingTermination+0x54>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e1      	bne.n	80058c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000bf4 	.word	0x20000bf4
 8005910:	20000c20 	.word	0x20000c20
 8005914:	20000c08 	.word	0x20000c08

08005918 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	4618      	mov	r0, r3
 8005930:	f000 ff68 	bl	8006804 <vPortFree>
				vPortFree( pxTCB );
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 ff65 	bl	8006804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800593a:	e017      	b.n	800596c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005942:	2b01      	cmp	r3, #1
 8005944:	d103      	bne.n	800594e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 ff5c 	bl	8006804 <vPortFree>
	}
 800594c:	e00e      	b.n	800596c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005954:	2b02      	cmp	r3, #2
 8005956:	d009      	beq.n	800596c <prvDeleteTCB+0x54>
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e7fe      	b.n	800596a <prvDeleteTCB+0x52>
	}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800598a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800598c:	e008      	b.n	80059a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000bd8 	.word	0x20000bd8
 80059b0:	20000c40 	.word	0x20000c40

080059b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <xTaskGetSchedulerState+0x34>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059c2:	2301      	movs	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	e008      	b.n	80059da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c8:	4b08      	ldr	r3, [pc, #32]	; (80059ec <xTaskGetSchedulerState+0x38>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059d0:	2302      	movs	r3, #2
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e001      	b.n	80059da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059da:	687b      	ldr	r3, [r7, #4]
	}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	20000c2c 	.word	0x20000c2c
 80059ec:	20000c48 	.word	0x20000c48

080059f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d054      	beq.n	8005ab0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a06:	4b2d      	ldr	r3, [pc, #180]	; (8005abc <xTaskPriorityDisinherit+0xcc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d009      	beq.n	8005a24 <xTaskPriorityDisinherit+0x34>
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e7fe      	b.n	8005a22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <xTaskPriorityDisinherit+0x50>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	e7fe      	b.n	8005a3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d02c      	beq.n	8005ab0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d128      	bne.n	8005ab0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fca0 	bl	80043a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <xTaskPriorityDisinherit+0xd0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d903      	bls.n	8005a90 <xTaskPriorityDisinherit+0xa0>
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ac0 <xTaskPriorityDisinherit+0xd0>)
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <xTaskPriorityDisinherit+0xd4>)
 8005a9e:	441a      	add	r2, r3
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7fe fc21 	bl	80042ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ab0:	697b      	ldr	r3, [r7, #20]
	}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000074c 	.word	0x2000074c
 8005ac0:	20000c28 	.word	0x20000c28
 8005ac4:	20000750 	.word	0x20000750

08005ac8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad8:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fc62 	bl	80043a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aea:	d10a      	bne.n	8005b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af2:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4819      	ldr	r0, [pc, #100]	; (8005b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8005afc:	f7fe fbf7 	bl	80042ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b00:	e026      	b.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d209      	bcs.n	8005b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f7fe fc05 	bl	8004336 <vListInsert>
}
 8005b2c:	e010      	b.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f7fe fbfb 	bl	8004336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d202      	bcs.n	8005b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b4a:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6013      	str	r3, [r2, #0]
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000c24 	.word	0x20000c24
 8005b5c:	2000074c 	.word	0x2000074c
 8005b60:	20000c0c 	.word	0x20000c0c
 8005b64:	20000bdc 	.word	0x20000bdc
 8005b68:	20000bd8 	.word	0x20000bd8
 8005b6c:	20000c40 	.word	0x20000c40

08005b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b7a:	f000 faff 	bl	800617c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <xTimerCreateTimerTask+0x80>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d021      	beq.n	8005bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b8e:	1d3a      	adds	r2, r7, #4
 8005b90:	f107 0108 	add.w	r1, r7, #8
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fb61 	bl	8004260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	9202      	str	r2, [sp, #8]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	2302      	movs	r3, #2
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	460a      	mov	r2, r1
 8005bb0:	4910      	ldr	r1, [pc, #64]	; (8005bf4 <xTimerCreateTimerTask+0x84>)
 8005bb2:	4811      	ldr	r0, [pc, #68]	; (8005bf8 <xTimerCreateTimerTask+0x88>)
 8005bb4:	f7ff f8f6 	bl	8004da4 <xTaskCreateStatic>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <xTimerCreateTimerTask+0x8c>)
 8005bbc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <xTimerCreateTimerTask+0x8c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <xTimerCreateTimerTask+0x74>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e7fe      	b.n	8005be2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000c7c 	.word	0x20000c7c
 8005bf4:	08006aec 	.word	0x08006aec
 8005bf8:	08005d31 	.word	0x08005d31
 8005bfc:	20000c80 	.word	0x20000c80

08005c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <xTimerGenericCommand+0x2c>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
 8005c2a:	e7fe      	b.n	8005c2a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <xTimerGenericCommand+0x94>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02a      	beq.n	8005c8a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	dc18      	bgt.n	8005c78 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c46:	f7ff feb5 	bl	80059b4 <xTaskGetSchedulerState>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d109      	bne.n	8005c64 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c50:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <xTimerGenericCommand+0x94>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f107 0110 	add.w	r1, r7, #16
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5c:	f7fe fccc 	bl	80045f8 <xQueueGenericSend>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24
 8005c62:	e012      	b.n	8005c8a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <xTimerGenericCommand+0x94>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f107 0110 	add.w	r1, r7, #16
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f7fe fcc2 	bl	80045f8 <xQueueGenericSend>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24
 8005c76:	e008      	b.n	8005c8a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c78:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <xTimerGenericCommand+0x94>)
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	f107 0110 	add.w	r1, r7, #16
 8005c80:	2300      	movs	r3, #0
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	f7fe fdb2 	bl	80047ec <xQueueGenericSendFromISR>
 8005c88:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000c7c 	.word	0x20000c7c

08005c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca2:	4b22      	ldr	r3, [pc, #136]	; (8005d2c <prvProcessExpiredTimer+0x94>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fb79 	bl	80043a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d021      	beq.n	8005d08 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	18d1      	adds	r1, r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	6978      	ldr	r0, [r7, #20]
 8005cd2:	f000 f8d1 	bl	8005e78 <prvInsertTimerInActiveList>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	f7ff ff8a 	bl	8005c00 <xTimerGenericCommand>
 8005cec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d112      	bne.n	8005d1a <prvProcessExpiredTimer+0x82>
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e7fe      	b.n	8005d06 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0e:	f023 0301 	bic.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	6978      	ldr	r0, [r7, #20]
 8005d20:	4798      	blx	r3
}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000c74 	.word	0x20000c74

08005d30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 f857 	bl	8005df0 <prvGetNextExpireTime>
 8005d42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4619      	mov	r1, r3
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f803 	bl	8005d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d4e:	f000 f8d5 	bl	8005efc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d52:	e7f1      	b.n	8005d38 <prvTimerTask+0x8>

08005d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d5e:	f7ff fa57 	bl	8005210 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f866 	bl	8005e38 <prvSampleTimeNow>
 8005d6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d130      	bne.n	8005dd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <prvProcessTimerOrBlockTask+0x3c>
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d806      	bhi.n	8005d90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d82:	f7ff fa53 	bl	800522c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff85 	bl	8005c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d8e:	e024      	b.n	8005dda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d96:	4b13      	ldr	r3, [pc, #76]	; (8005de4 <prvProcessTimerOrBlockTask+0x90>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <prvProcessTimerOrBlockTask+0x50>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <prvProcessTimerOrBlockTask+0x52>
 8005da4:	2300      	movs	r3, #0
 8005da6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <prvProcessTimerOrBlockTask+0x94>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fe ffc1 	bl	8004d3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f7ff fa37 	bl	800522c <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dc4:	4b09      	ldr	r3, [pc, #36]	; (8005dec <prvProcessTimerOrBlockTask+0x98>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
}
 8005dd4:	e001      	b.n	8005dda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dd6:	f7ff fa29 	bl	800522c <xTaskResumeAll>
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000c78 	.word	0x20000c78
 8005de8:	20000c7c 	.word	0x20000c7c
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005df8:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <prvGetNextExpireTime+0x44>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <prvGetNextExpireTime+0x16>
 8005e02:	2201      	movs	r2, #1
 8005e04:	e000      	b.n	8005e08 <prvGetNextExpireTime+0x18>
 8005e06:	2200      	movs	r2, #0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e14:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <prvGetNextExpireTime+0x44>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e001      	b.n	8005e24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000c74 	.word	0x20000c74

08005e38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e40:	f7ff fa90 	bl	8005364 <xTaskGetTickCount>
 8005e44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <prvSampleTimeNow+0x3c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d205      	bcs.n	8005e5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e50:	f000 f930 	bl	80060b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e62:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <prvSampleTimeNow+0x3c>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000c84 	.word	0x20000c84

08005e78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d812      	bhi.n	8005ec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad2      	subs	r2, r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e01b      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eb2:	4b10      	ldr	r3, [pc, #64]	; (8005ef4 <prvInsertTimerInActiveList+0x7c>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fe fa3a 	bl	8004336 <vListInsert>
 8005ec2:	e012      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d206      	bcs.n	8005eda <prvInsertTimerInActiveList+0x62>
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e007      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <prvInsertTimerInActiveList+0x80>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7fe fa26 	bl	8004336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000c78 	.word	0x20000c78
 8005ef8:	20000c74 	.word	0x20000c74

08005efc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f02:	e0c6      	b.n	8006092 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da17      	bge.n	8005f3a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <prvProcessReceivedCommands+0x2e>
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	e7fe      	b.n	8005f28 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f30:	6850      	ldr	r0, [r2, #4]
 8005f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f34:	6892      	ldr	r2, [r2, #8]
 8005f36:	4611      	mov	r1, r2
 8005f38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f2c0 80a7 	blt.w	8006090 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	3304      	adds	r3, #4
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fa28 	bl	80043a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f58:	463b      	mov	r3, r7
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff6c 	bl	8005e38 <prvSampleTimeNow>
 8005f60:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b09      	cmp	r3, #9
 8005f66:	f200 8094 	bhi.w	8006092 <prvProcessReceivedCommands+0x196>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <prvProcessReceivedCommands+0x74>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	0800600b 	.word	0x0800600b
 8005f80:	0800601f 	.word	0x0800601f
 8005f84:	08006067 	.word	0x08006067
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005f99 	.word	0x08005f99
 8005f90:	0800600b 	.word	0x0800600b
 8005f94:	0800601f 	.word	0x0800601f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	18d1      	adds	r1, r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	f7ff ff5e 	bl	8005e78 <prvInsertTimerInActiveList>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d067      	beq.n	8006092 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05c      	beq.n	8006092 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	441a      	add	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f7ff fe09 	bl	8005c00 <xTimerGenericCommand>
 8005fee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d14d      	bne.n	8006092 <prvProcessReceivedCommands+0x196>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	e7fe      	b.n	8006008 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800601c:	e039      	b.n	8006092 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <prvProcessReceivedCommands+0x156>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e7fe      	b.n	8006050 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	18d1      	adds	r1, r2, r3
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006060:	f7ff ff0a 	bl	8005e78 <prvInsertTimerInActiveList>
					break;
 8006064:	e015      	b.n	8006092 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d103      	bne.n	800607c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006076:	f000 fbc5 	bl	8006804 <vPortFree>
 800607a:	e00a      	b.n	8006092 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800608e:	e000      	b.n	8006092 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <prvProcessReceivedCommands+0x1b4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1d39      	adds	r1, r7, #4
 8006098:	2200      	movs	r2, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe fc3a 	bl	8004914 <xQueueReceive>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f47f af2e 	bne.w	8005f04 <prvProcessReceivedCommands+0x8>
	}
}
 80060a8:	bf00      	nop
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000c7c 	.word	0x20000c7c

080060b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ba:	e047      	b.n	800614c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060bc:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <prvSwitchTimerLists+0xc0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c6:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <prvSwitchTimerLists+0xc0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe f967 	bl	80043a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02d      	beq.n	800614c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d90e      	bls.n	8006120 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800610e:	4b19      	ldr	r3, [pc, #100]	; (8006174 <prvSwitchTimerLists+0xc0>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f7fe f90c 	bl	8004336 <vListInsert>
 800611e:	e015      	b.n	800614c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006120:	2300      	movs	r3, #0
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	2100      	movs	r1, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fd68 	bl	8005c00 <xTimerGenericCommand>
 8006130:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <prvSwitchTimerLists+0x98>
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	e7fe      	b.n	800614a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <prvSwitchTimerLists+0xc0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1b2      	bne.n	80060bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <prvSwitchTimerLists+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <prvSwitchTimerLists+0xc4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a04      	ldr	r2, [pc, #16]	; (8006174 <prvSwitchTimerLists+0xc0>)
 8006162:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <prvSwitchTimerLists+0xc4>)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	6013      	str	r3, [r2, #0]
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000c74 	.word	0x20000c74
 8006178:	20000c78 	.word	0x20000c78

0800617c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006182:	f000 f963 	bl	800644c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d120      	bne.n	80061d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800618e:	4814      	ldr	r0, [pc, #80]	; (80061e0 <prvCheckForValidListAndQueue+0x64>)
 8006190:	f7fe f880 	bl	8004294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006194:	4813      	ldr	r0, [pc, #76]	; (80061e4 <prvCheckForValidListAndQueue+0x68>)
 8006196:	f7fe f87d 	bl	8004294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <prvCheckForValidListAndQueue+0x6c>)
 800619c:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <prvCheckForValidListAndQueue+0x64>)
 800619e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061a0:	4b12      	ldr	r3, [pc, #72]	; (80061ec <prvCheckForValidListAndQueue+0x70>)
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <prvCheckForValidListAndQueue+0x68>)
 80061a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061a6:	2300      	movs	r3, #0
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <prvCheckForValidListAndQueue+0x74>)
 80061ac:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <prvCheckForValidListAndQueue+0x78>)
 80061ae:	2110      	movs	r1, #16
 80061b0:	200a      	movs	r0, #10
 80061b2:	f7fe f98b 	bl	80044cc <xQueueGenericCreateStatic>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <prvCheckForValidListAndQueue+0x60>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	490b      	ldr	r1, [pc, #44]	; (80061f8 <prvCheckForValidListAndQueue+0x7c>)
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fd8e 	bl	8004cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061d0:	f000 f96a 	bl	80064a8 <vPortExitCritical>
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000c7c 	.word	0x20000c7c
 80061e0:	20000c4c 	.word	0x20000c4c
 80061e4:	20000c60 	.word	0x20000c60
 80061e8:	20000c74 	.word	0x20000c74
 80061ec:	20000c78 	.word	0x20000c78
 80061f0:	20000d28 	.word	0x20000d28
 80061f4:	20000c88 	.word	0x20000c88
 80061f8:	08006af4 	.word	0x08006af4

080061fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3b04      	subs	r3, #4
 800620c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b04      	subs	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0201 	bic.w	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3b04      	subs	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800622c:	4a0c      	ldr	r2, [pc, #48]	; (8006260 <pxPortInitialiseStack+0x64>)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3b14      	subs	r3, #20
 8006236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b04      	subs	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f06f 0202 	mvn.w	r2, #2
 800624a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3b20      	subs	r3, #32
 8006250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006252:	68fb      	ldr	r3, [r7, #12]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	08006265 	.word	0x08006265

08006264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <prvTaskExitError+0x50>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006276:	d009      	beq.n	800628c <prvTaskExitError+0x28>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e7fe      	b.n	800628a <prvTaskExitError+0x26>
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800629e:	bf00      	nop
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0fc      	beq.n	80062a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000001c 	.word	0x2000001c
	...

080062c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <pxCurrentTCBConst2>)
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f380 8809 	msr	PSP, r0
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8811 	msr	BASEPRI, r0
 80062da:	4770      	bx	lr
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst2>:
 80062e0:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <prvPortStartFirstTask+0x24>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f380 8808 	msr	MSP, r0
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8814 	msr	CONTROL, r0
 80062fa:	b662      	cpsie	i
 80062fc:	b661      	cpsie	f
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	df00      	svc	0
 8006308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800630a:	bf00      	nop
 800630c:	e000ed08 	.word	0xe000ed08

08006310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006316:	4b44      	ldr	r3, [pc, #272]	; (8006428 <xPortStartScheduler+0x118>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a44      	ldr	r2, [pc, #272]	; (800642c <xPortStartScheduler+0x11c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d109      	bne.n	8006334 <xPortStartScheduler+0x24>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e7fe      	b.n	8006332 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006334:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <xPortStartScheduler+0x118>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <xPortStartScheduler+0x120>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d109      	bne.n	8006352 <xPortStartScheduler+0x42>
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e7fe      	b.n	8006350 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006352:	4b38      	ldr	r3, [pc, #224]	; (8006434 <xPortStartScheduler+0x124>)
 8006354:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	22ff      	movs	r2, #255	; 0xff
 8006362:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006374:	b2da      	uxtb	r2, r3
 8006376:	4b30      	ldr	r3, [pc, #192]	; (8006438 <xPortStartScheduler+0x128>)
 8006378:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800637a:	4b30      	ldr	r3, [pc, #192]	; (800643c <xPortStartScheduler+0x12c>)
 800637c:	2207      	movs	r2, #7
 800637e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006380:	e009      	b.n	8006396 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006382:	4b2e      	ldr	r3, [pc, #184]	; (800643c <xPortStartScheduler+0x12c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3b01      	subs	r3, #1
 8006388:	4a2c      	ldr	r2, [pc, #176]	; (800643c <xPortStartScheduler+0x12c>)
 800638a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d0ef      	beq.n	8006382 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063a2:	4b26      	ldr	r3, [pc, #152]	; (800643c <xPortStartScheduler+0x12c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1c3 0307 	rsb	r3, r3, #7
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d009      	beq.n	80063c2 <xPortStartScheduler+0xb2>
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
 80063c0:	e7fe      	b.n	80063c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063c2:	4b1e      	ldr	r3, [pc, #120]	; (800643c <xPortStartScheduler+0x12c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	4a1c      	ldr	r2, [pc, #112]	; (800643c <xPortStartScheduler+0x12c>)
 80063ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <xPortStartScheduler+0x12c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d4:	4a19      	ldr	r2, [pc, #100]	; (800643c <xPortStartScheduler+0x12c>)
 80063d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063e0:	4b17      	ldr	r3, [pc, #92]	; (8006440 <xPortStartScheduler+0x130>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a16      	ldr	r2, [pc, #88]	; (8006440 <xPortStartScheduler+0x130>)
 80063e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063ec:	4b14      	ldr	r3, [pc, #80]	; (8006440 <xPortStartScheduler+0x130>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <xPortStartScheduler+0x130>)
 80063f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063f8:	f000 f8d6 	bl	80065a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <xPortStartScheduler+0x134>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006402:	f000 f8f5 	bl	80065f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <xPortStartScheduler+0x138>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0f      	ldr	r2, [pc, #60]	; (8006448 <xPortStartScheduler+0x138>)
 800640c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006410:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006412:	f7ff ff69 	bl	80062e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006416:	f7ff f86d 	bl	80054f4 <vTaskSwitchContext>
	prvTaskExitError();
 800641a:	f7ff ff23 	bl	8006264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed00 	.word	0xe000ed00
 800642c:	410fc271 	.word	0x410fc271
 8006430:	410fc270 	.word	0x410fc270
 8006434:	e000e400 	.word	0xe000e400
 8006438:	20000d78 	.word	0x20000d78
 800643c:	20000d7c 	.word	0x20000d7c
 8006440:	e000ed20 	.word	0xe000ed20
 8006444:	2000001c 	.word	0x2000001c
 8006448:	e000ef34 	.word	0xe000ef34

0800644c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006464:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <vPortEnterCritical+0x54>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a0d      	ldr	r2, [pc, #52]	; (80064a0 <vPortEnterCritical+0x54>)
 800646c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <vPortEnterCritical+0x54>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10e      	bne.n	8006494 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <vPortEnterCritical+0x58>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <vPortEnterCritical+0x48>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	e7fe      	b.n	8006492 <vPortEnterCritical+0x46>
	}
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	2000001c 	.word	0x2000001c
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <vPortExitCritical+0x4c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <vPortExitCritical+0x22>
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	e7fe      	b.n	80064c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x4c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <vPortExitCritical+0x4c>)
 80064d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <vPortExitCritical+0x4c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d104      	bne.n	80064e6 <vPortExitCritical+0x3e>
 80064dc:	2300      	movs	r3, #0
 80064de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000001c 	.word	0x2000001c
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7fe ffe0 	bl	80054f4 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006580:	f7fe ff00 	bl	8005384 <xTaskIncrementTick>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <SysTick_Handler+0x3c>)
 800658c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <vPortSetupTimerInterrupt+0x34>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x38>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <vPortSetupTimerInterrupt+0x3c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x40>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	099b      	lsrs	r3, r3, #6
 80065c4:	4a09      	ldr	r2, [pc, #36]	; (80065ec <vPortSetupTimerInterrupt+0x44>)
 80065c6:	3b01      	subs	r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <vPortSetupTimerInterrupt+0x34>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	e000e010 	.word	0xe000e010
 80065e0:	e000e018 	.word	0xe000e018
 80065e4:	20000010 	.word	0x20000010
 80065e8:	10624dd3 	.word	0x10624dd3
 80065ec:	e000e014 	.word	0xe000e014

080065f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006600 <vPortEnableVFP+0x10>
 80065f4:	6801      	ldr	r1, [r0, #0]
 80065f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fa:	6001      	str	r1, [r0, #0]
 80065fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065fe:	bf00      	nop
 8006600:	e000ed88 	.word	0xe000ed88

08006604 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800660a:	f3ef 8305 	mrs	r3, IPSR
 800660e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	d913      	bls.n	800663e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006616:	4a16      	ldr	r2, [pc, #88]	; (8006670 <vPortValidateInterruptPriority+0x6c>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006620:	4b14      	ldr	r3, [pc, #80]	; (8006674 <vPortValidateInterruptPriority+0x70>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	7afa      	ldrb	r2, [r7, #11]
 8006626:	429a      	cmp	r2, r3
 8006628:	d209      	bcs.n	800663e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	e7fe      	b.n	800663c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800663e:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <vPortValidateInterruptPriority+0x74>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <vPortValidateInterruptPriority+0x78>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d909      	bls.n	8006662 <vPortValidateInterruptPriority+0x5e>
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	e7fe      	b.n	8006660 <vPortValidateInterruptPriority+0x5c>
	}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e3f0 	.word	0xe000e3f0
 8006674:	20000d78 	.word	0x20000d78
 8006678:	e000ed0c 	.word	0xe000ed0c
 800667c:	20000d7c 	.word	0x20000d7c

08006680 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800668c:	f7fe fdc0 	bl	8005210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006690:	4b57      	ldr	r3, [pc, #348]	; (80067f0 <pvPortMalloc+0x170>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006698:	f000 f90c 	bl	80068b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800669c:	4b55      	ldr	r3, [pc, #340]	; (80067f4 <pvPortMalloc+0x174>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f040 808c 	bne.w	80067c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01c      	beq.n	80066ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80066b0:	2208      	movs	r2, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d013      	beq.n	80066ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f023 0307 	bic.w	r3, r3, #7
 80066c8:	3308      	adds	r3, #8
 80066ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <pvPortMalloc+0x6a>
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e7fe      	b.n	80066e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d068      	beq.n	80067c2 <pvPortMalloc+0x142>
 80066f0:	4b41      	ldr	r3, [pc, #260]	; (80067f8 <pvPortMalloc+0x178>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d863      	bhi.n	80067c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066fa:	4b40      	ldr	r3, [pc, #256]	; (80067fc <pvPortMalloc+0x17c>)
 80066fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066fe:	4b3f      	ldr	r3, [pc, #252]	; (80067fc <pvPortMalloc+0x17c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006704:	e004      	b.n	8006710 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	429a      	cmp	r2, r3
 8006718:	d903      	bls.n	8006722 <pvPortMalloc+0xa2>
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f1      	bne.n	8006706 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006722:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <pvPortMalloc+0x170>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006728:	429a      	cmp	r2, r3
 800672a:	d04a      	beq.n	80067c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2208      	movs	r2, #8
 8006732:	4413      	add	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	2308      	movs	r3, #8
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	429a      	cmp	r2, r3
 800674c:	d91e      	bls.n	800678c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800674e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <pvPortMalloc+0xf4>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	e7fe      	b.n	8006772 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	1ad2      	subs	r2, r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f000 f8f6 	bl	8006978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <pvPortMalloc+0x178>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <pvPortMalloc+0x178>)
 8006798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800679a:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <pvPortMalloc+0x178>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <pvPortMalloc+0x180>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d203      	bcs.n	80067ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <pvPortMalloc+0x178>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a15      	ldr	r2, [pc, #84]	; (8006800 <pvPortMalloc+0x180>)
 80067ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <pvPortMalloc+0x174>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067c2:	f7fe fd33 	bl	800522c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <pvPortMalloc+0x164>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e7fe      	b.n	80067e2 <pvPortMalloc+0x162>
	return pvReturn;
 80067e4:	69fb      	ldr	r3, [r7, #28]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3728      	adds	r7, #40	; 0x28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20004988 	.word	0x20004988
 80067f4:	20004994 	.word	0x20004994
 80067f8:	2000498c 	.word	0x2000498c
 80067fc:	20004980 	.word	0x20004980
 8006800:	20004990 	.word	0x20004990

08006804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d046      	beq.n	80068a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006816:	2308      	movs	r3, #8
 8006818:	425b      	negs	r3, r3
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4413      	add	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	4b20      	ldr	r3, [pc, #128]	; (80068ac <vPortFree+0xa8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <vPortFree+0x42>
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e7fe      	b.n	8006844 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <vPortFree+0x5e>
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	e7fe      	b.n	8006860 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <vPortFree+0xa8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d019      	beq.n	80068a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <vPortFree+0xa8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006888:	f7fe fcc2 	bl	8005210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <vPortFree+0xac>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4413      	add	r3, r2
 8006896:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <vPortFree+0xac>)
 8006898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f000 f86c 	bl	8006978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068a0:	f7fe fcc4 	bl	800522c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20004994 	.word	0x20004994
 80068b0:	2000498c 	.word	0x2000498c

080068b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068c0:	4b27      	ldr	r3, [pc, #156]	; (8006960 <prvHeapInit+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3307      	adds	r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	4a1f      	ldr	r2, [pc, #124]	; (8006960 <prvHeapInit+0xac>)
 80068e4:	4413      	add	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <prvHeapInit+0xb0>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <prvHeapInit+0xb0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006900:	2208      	movs	r2, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <prvHeapInit+0xb4>)
 8006914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <prvHeapInit+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvHeapInit+0xb4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvHeapInit+0xb4>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <prvHeapInit+0xb8>)
 8006942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <prvHeapInit+0xbc>)
 800694a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <prvHeapInit+0xc0>)
 800694e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20000d80 	.word	0x20000d80
 8006964:	20004980 	.word	0x20004980
 8006968:	20004988 	.word	0x20004988
 800696c:	20004990 	.word	0x20004990
 8006970:	2000498c 	.word	0x2000498c
 8006974:	20004994 	.word	0x20004994

08006978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <prvInsertBlockIntoFreeList+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e002      	b.n	800698c <prvInsertBlockIntoFreeList+0x14>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d8f7      	bhi.n	8006986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d108      	bne.n	80069ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	441a      	add	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d118      	bne.n	8006a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d00d      	beq.n	80069f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20004980 	.word	0x20004980
 8006a28:	20004988 	.word	0x20004988

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4e0d      	ldr	r6, [pc, #52]	; (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1ba4      	subs	r4, r4, r6
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2500      	movs	r5, #0
 8006a38:	42a5      	cmp	r5, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4e0b      	ldr	r6, [pc, #44]	; (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	; (8006a70 <__libc_init_array+0x44>)
 8006a40:	f000 f82c 	bl	8006a9c <_init>
 8006a44:	1ba4      	subs	r4, r4, r6
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2500      	movs	r5, #0
 8006a4a:	42a5      	cmp	r5, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a54:	4798      	blx	r3
 8006a56:	3501      	adds	r5, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a5e:	4798      	blx	r3
 8006a60:	3501      	adds	r5, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08006bac 	.word	0x08006bac
 8006a68:	08006bac 	.word	0x08006bac
 8006a6c:	08006bac 	.word	0x08006bac
 8006a70:	08006bb0 	.word	0x08006bb0

08006a74 <memcpy>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	1e43      	subs	r3, r0, #1
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	d100      	bne.n	8006a80 <memcpy+0xc>
 8006a7e:	bd10      	pop	{r4, pc}
 8006a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a88:	e7f7      	b.n	8006a7a <memcpy+0x6>

08006a8a <memset>:
 8006a8a:	4402      	add	r2, r0
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d100      	bne.n	8006a94 <memset+0xa>
 8006a92:	4770      	bx	lr
 8006a94:	f803 1b01 	strb.w	r1, [r3], #1
 8006a98:	e7f9      	b.n	8006a8e <memset+0x4>
	...

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
